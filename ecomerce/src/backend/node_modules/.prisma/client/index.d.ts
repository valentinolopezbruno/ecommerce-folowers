
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model credenciales
 * 
 */
export type credenciales = $Result.DefaultSelection<Prisma.$credencialesPayload>
/**
 * Model pagos
 * 
 */
export type pagos = $Result.DefaultSelection<Prisma.$pagosPayload>
/**
 * Model producto_cantidad
 * 
 */
export type producto_cantidad = $Result.DefaultSelection<Prisma.$producto_cantidadPayload>
/**
 * Model productos
 * 
 */
export type productos = $Result.DefaultSelection<Prisma.$productosPayload>
/**
 * Model social
 * 
 */
export type social = $Result.DefaultSelection<Prisma.$socialPayload>
/**
 * Model usuarios
 * 
 */
export type usuarios = $Result.DefaultSelection<Prisma.$usuariosPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Credenciales
 * const credenciales = await prisma.credenciales.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Credenciales
   * const credenciales = await prisma.credenciales.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.credenciales`: Exposes CRUD operations for the **credenciales** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Credenciales
    * const credenciales = await prisma.credenciales.findMany()
    * ```
    */
  get credenciales(): Prisma.credencialesDelegate<ExtArgs>;

  /**
   * `prisma.pagos`: Exposes CRUD operations for the **pagos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pagos
    * const pagos = await prisma.pagos.findMany()
    * ```
    */
  get pagos(): Prisma.pagosDelegate<ExtArgs>;

  /**
   * `prisma.producto_cantidad`: Exposes CRUD operations for the **producto_cantidad** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Producto_cantidads
    * const producto_cantidads = await prisma.producto_cantidad.findMany()
    * ```
    */
  get producto_cantidad(): Prisma.producto_cantidadDelegate<ExtArgs>;

  /**
   * `prisma.productos`: Exposes CRUD operations for the **productos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Productos
    * const productos = await prisma.productos.findMany()
    * ```
    */
  get productos(): Prisma.productosDelegate<ExtArgs>;

  /**
   * `prisma.social`: Exposes CRUD operations for the **social** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Socials
    * const socials = await prisma.social.findMany()
    * ```
    */
  get social(): Prisma.socialDelegate<ExtArgs>;

  /**
   * `prisma.usuarios`: Exposes CRUD operations for the **usuarios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuarios.findMany()
    * ```
    */
  get usuarios(): Prisma.usuariosDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.2.0
   * Query Engine version: 2804dc98259d2ea960602aca6b8e7fdc03c1758f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    credenciales: 'credenciales',
    pagos: 'pagos',
    producto_cantidad: 'producto_cantidad',
    productos: 'productos',
    social: 'social',
    usuarios: 'usuarios'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'credenciales' | 'pagos' | 'producto_cantidad' | 'productos' | 'social' | 'usuarios'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      credenciales: {
        payload: Prisma.$credencialesPayload<ExtArgs>
        fields: Prisma.credencialesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.credencialesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$credencialesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.credencialesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$credencialesPayload>
          }
          findFirst: {
            args: Prisma.credencialesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$credencialesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.credencialesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$credencialesPayload>
          }
          findMany: {
            args: Prisma.credencialesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$credencialesPayload>[]
          }
          create: {
            args: Prisma.credencialesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$credencialesPayload>
          }
          createMany: {
            args: Prisma.credencialesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.credencialesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$credencialesPayload>
          }
          update: {
            args: Prisma.credencialesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$credencialesPayload>
          }
          deleteMany: {
            args: Prisma.credencialesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.credencialesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.credencialesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$credencialesPayload>
          }
          aggregate: {
            args: Prisma.CredencialesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCredenciales>
          }
          groupBy: {
            args: Prisma.credencialesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CredencialesGroupByOutputType>[]
          }
          count: {
            args: Prisma.credencialesCountArgs<ExtArgs>,
            result: $Utils.Optional<CredencialesCountAggregateOutputType> | number
          }
        }
      }
      pagos: {
        payload: Prisma.$pagosPayload<ExtArgs>
        fields: Prisma.pagosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.pagosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pagosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.pagosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pagosPayload>
          }
          findFirst: {
            args: Prisma.pagosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pagosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.pagosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pagosPayload>
          }
          findMany: {
            args: Prisma.pagosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pagosPayload>[]
          }
          create: {
            args: Prisma.pagosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pagosPayload>
          }
          createMany: {
            args: Prisma.pagosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.pagosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pagosPayload>
          }
          update: {
            args: Prisma.pagosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pagosPayload>
          }
          deleteMany: {
            args: Prisma.pagosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.pagosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.pagosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pagosPayload>
          }
          aggregate: {
            args: Prisma.PagosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePagos>
          }
          groupBy: {
            args: Prisma.pagosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PagosGroupByOutputType>[]
          }
          count: {
            args: Prisma.pagosCountArgs<ExtArgs>,
            result: $Utils.Optional<PagosCountAggregateOutputType> | number
          }
        }
      }
      producto_cantidad: {
        payload: Prisma.$producto_cantidadPayload<ExtArgs>
        fields: Prisma.producto_cantidadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.producto_cantidadFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$producto_cantidadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.producto_cantidadFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$producto_cantidadPayload>
          }
          findFirst: {
            args: Prisma.producto_cantidadFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$producto_cantidadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.producto_cantidadFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$producto_cantidadPayload>
          }
          findMany: {
            args: Prisma.producto_cantidadFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$producto_cantidadPayload>[]
          }
          create: {
            args: Prisma.producto_cantidadCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$producto_cantidadPayload>
          }
          createMany: {
            args: Prisma.producto_cantidadCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.producto_cantidadDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$producto_cantidadPayload>
          }
          update: {
            args: Prisma.producto_cantidadUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$producto_cantidadPayload>
          }
          deleteMany: {
            args: Prisma.producto_cantidadDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.producto_cantidadUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.producto_cantidadUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$producto_cantidadPayload>
          }
          aggregate: {
            args: Prisma.Producto_cantidadAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProducto_cantidad>
          }
          groupBy: {
            args: Prisma.producto_cantidadGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Producto_cantidadGroupByOutputType>[]
          }
          count: {
            args: Prisma.producto_cantidadCountArgs<ExtArgs>,
            result: $Utils.Optional<Producto_cantidadCountAggregateOutputType> | number
          }
        }
      }
      productos: {
        payload: Prisma.$productosPayload<ExtArgs>
        fields: Prisma.productosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productosPayload>
          }
          findFirst: {
            args: Prisma.productosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productosPayload>
          }
          findMany: {
            args: Prisma.productosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productosPayload>[]
          }
          create: {
            args: Prisma.productosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productosPayload>
          }
          createMany: {
            args: Prisma.productosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.productosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productosPayload>
          }
          update: {
            args: Prisma.productosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productosPayload>
          }
          deleteMany: {
            args: Prisma.productosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.productosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.productosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productosPayload>
          }
          aggregate: {
            args: Prisma.ProductosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProductos>
          }
          groupBy: {
            args: Prisma.productosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductosGroupByOutputType>[]
          }
          count: {
            args: Prisma.productosCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductosCountAggregateOutputType> | number
          }
        }
      }
      social: {
        payload: Prisma.$socialPayload<ExtArgs>
        fields: Prisma.socialFieldRefs
        operations: {
          findUnique: {
            args: Prisma.socialFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$socialPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.socialFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$socialPayload>
          }
          findFirst: {
            args: Prisma.socialFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$socialPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.socialFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$socialPayload>
          }
          findMany: {
            args: Prisma.socialFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$socialPayload>[]
          }
          create: {
            args: Prisma.socialCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$socialPayload>
          }
          createMany: {
            args: Prisma.socialCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.socialDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$socialPayload>
          }
          update: {
            args: Prisma.socialUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$socialPayload>
          }
          deleteMany: {
            args: Prisma.socialDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.socialUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.socialUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$socialPayload>
          }
          aggregate: {
            args: Prisma.SocialAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSocial>
          }
          groupBy: {
            args: Prisma.socialGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SocialGroupByOutputType>[]
          }
          count: {
            args: Prisma.socialCountArgs<ExtArgs>,
            result: $Utils.Optional<SocialCountAggregateOutputType> | number
          }
        }
      }
      usuarios: {
        payload: Prisma.$usuariosPayload<ExtArgs>
        fields: Prisma.usuariosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usuariosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usuariosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          findFirst: {
            args: Prisma.usuariosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usuariosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          findMany: {
            args: Prisma.usuariosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>[]
          }
          create: {
            args: Prisma.usuariosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          createMany: {
            args: Prisma.usuariosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usuariosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          update: {
            args: Prisma.usuariosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          deleteMany: {
            args: Prisma.usuariosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usuariosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usuariosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          aggregate: {
            args: Prisma.UsuariosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsuarios>
          }
          groupBy: {
            args: Prisma.usuariosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsuariosGroupByOutputType>[]
          }
          count: {
            args: Prisma.usuariosCountArgs<ExtArgs>,
            result: $Utils.Optional<UsuariosCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProductosCountOutputType
   */

  export type ProductosCountOutputType = {
    producto_cantidad: number
  }

  export type ProductosCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    producto_cantidad?: boolean | ProductosCountOutputTypeCountProducto_cantidadArgs
  }

  // Custom InputTypes

  /**
   * ProductosCountOutputType without action
   */
  export type ProductosCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductosCountOutputType
     */
    select?: ProductosCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProductosCountOutputType without action
   */
  export type ProductosCountOutputTypeCountProducto_cantidadArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: producto_cantidadWhereInput
  }



  /**
   * Count Type SocialCountOutputType
   */

  export type SocialCountOutputType = {
    productos: number
  }

  export type SocialCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    productos?: boolean | SocialCountOutputTypeCountProductosArgs
  }

  // Custom InputTypes

  /**
   * SocialCountOutputType without action
   */
  export type SocialCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialCountOutputType
     */
    select?: SocialCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SocialCountOutputType without action
   */
  export type SocialCountOutputTypeCountProductosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: productosWhereInput
  }



  /**
   * Models
   */

  /**
   * Model credenciales
   */

  export type AggregateCredenciales = {
    _count: CredencialesCountAggregateOutputType | null
    _avg: CredencialesAvgAggregateOutputType | null
    _sum: CredencialesSumAggregateOutputType | null
    _min: CredencialesMinAggregateOutputType | null
    _max: CredencialesMaxAggregateOutputType | null
  }

  export type CredencialesAvgAggregateOutputType = {
    id: number | null
  }

  export type CredencialesSumAggregateOutputType = {
    id: number | null
  }

  export type CredencialesMinAggregateOutputType = {
    id: number | null
    pasarela: string | null
    cliente_id: string | null
    cliente_secret: string | null
  }

  export type CredencialesMaxAggregateOutputType = {
    id: number | null
    pasarela: string | null
    cliente_id: string | null
    cliente_secret: string | null
  }

  export type CredencialesCountAggregateOutputType = {
    id: number
    pasarela: number
    cliente_id: number
    cliente_secret: number
    _all: number
  }


  export type CredencialesAvgAggregateInputType = {
    id?: true
  }

  export type CredencialesSumAggregateInputType = {
    id?: true
  }

  export type CredencialesMinAggregateInputType = {
    id?: true
    pasarela?: true
    cliente_id?: true
    cliente_secret?: true
  }

  export type CredencialesMaxAggregateInputType = {
    id?: true
    pasarela?: true
    cliente_id?: true
    cliente_secret?: true
  }

  export type CredencialesCountAggregateInputType = {
    id?: true
    pasarela?: true
    cliente_id?: true
    cliente_secret?: true
    _all?: true
  }

  export type CredencialesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which credenciales to aggregate.
     */
    where?: credencialesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of credenciales to fetch.
     */
    orderBy?: credencialesOrderByWithRelationInput | credencialesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: credencialesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` credenciales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` credenciales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned credenciales
    **/
    _count?: true | CredencialesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CredencialesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CredencialesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CredencialesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CredencialesMaxAggregateInputType
  }

  export type GetCredencialesAggregateType<T extends CredencialesAggregateArgs> = {
        [P in keyof T & keyof AggregateCredenciales]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCredenciales[P]>
      : GetScalarType<T[P], AggregateCredenciales[P]>
  }




  export type credencialesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: credencialesWhereInput
    orderBy?: credencialesOrderByWithAggregationInput | credencialesOrderByWithAggregationInput[]
    by: CredencialesScalarFieldEnum[] | CredencialesScalarFieldEnum
    having?: credencialesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CredencialesCountAggregateInputType | true
    _avg?: CredencialesAvgAggregateInputType
    _sum?: CredencialesSumAggregateInputType
    _min?: CredencialesMinAggregateInputType
    _max?: CredencialesMaxAggregateInputType
  }

  export type CredencialesGroupByOutputType = {
    id: number
    pasarela: string
    cliente_id: string
    cliente_secret: string
    _count: CredencialesCountAggregateOutputType | null
    _avg: CredencialesAvgAggregateOutputType | null
    _sum: CredencialesSumAggregateOutputType | null
    _min: CredencialesMinAggregateOutputType | null
    _max: CredencialesMaxAggregateOutputType | null
  }

  type GetCredencialesGroupByPayload<T extends credencialesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CredencialesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CredencialesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CredencialesGroupByOutputType[P]>
            : GetScalarType<T[P], CredencialesGroupByOutputType[P]>
        }
      >
    >


  export type credencialesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pasarela?: boolean
    cliente_id?: boolean
    cliente_secret?: boolean
  }, ExtArgs["result"]["credenciales"]>

  export type credencialesSelectScalar = {
    id?: boolean
    pasarela?: boolean
    cliente_id?: boolean
    cliente_secret?: boolean
  }


  export type $credencialesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "credenciales"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: number
      pasarela: string
      cliente_id: string
      cliente_secret: string
    }, ExtArgs["result"]["credenciales"]>
    composites: {}
  }


  type credencialesGetPayload<S extends boolean | null | undefined | credencialesDefaultArgs> = $Result.GetResult<Prisma.$credencialesPayload, S>

  type credencialesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<credencialesFindManyArgs, 'select' | 'include'> & {
      select?: CredencialesCountAggregateInputType | true
    }

  export interface credencialesDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['credenciales'], meta: { name: 'credenciales' } }
    /**
     * Find zero or one Credenciales that matches the filter.
     * @param {credencialesFindUniqueArgs} args - Arguments to find a Credenciales
     * @example
     * // Get one Credenciales
     * const credenciales = await prisma.credenciales.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends credencialesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, credencialesFindUniqueArgs<ExtArgs>>
    ): Prisma__credencialesClient<$Result.GetResult<Prisma.$credencialesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Credenciales that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {credencialesFindUniqueOrThrowArgs} args - Arguments to find a Credenciales
     * @example
     * // Get one Credenciales
     * const credenciales = await prisma.credenciales.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends credencialesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, credencialesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__credencialesClient<$Result.GetResult<Prisma.$credencialesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Credenciales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {credencialesFindFirstArgs} args - Arguments to find a Credenciales
     * @example
     * // Get one Credenciales
     * const credenciales = await prisma.credenciales.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends credencialesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, credencialesFindFirstArgs<ExtArgs>>
    ): Prisma__credencialesClient<$Result.GetResult<Prisma.$credencialesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Credenciales that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {credencialesFindFirstOrThrowArgs} args - Arguments to find a Credenciales
     * @example
     * // Get one Credenciales
     * const credenciales = await prisma.credenciales.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends credencialesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, credencialesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__credencialesClient<$Result.GetResult<Prisma.$credencialesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Credenciales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {credencialesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Credenciales
     * const credenciales = await prisma.credenciales.findMany()
     * 
     * // Get first 10 Credenciales
     * const credenciales = await prisma.credenciales.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const credencialesWithIdOnly = await prisma.credenciales.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends credencialesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, credencialesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$credencialesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Credenciales.
     * @param {credencialesCreateArgs} args - Arguments to create a Credenciales.
     * @example
     * // Create one Credenciales
     * const Credenciales = await prisma.credenciales.create({
     *   data: {
     *     // ... data to create a Credenciales
     *   }
     * })
     * 
    **/
    create<T extends credencialesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, credencialesCreateArgs<ExtArgs>>
    ): Prisma__credencialesClient<$Result.GetResult<Prisma.$credencialesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Credenciales.
     *     @param {credencialesCreateManyArgs} args - Arguments to create many Credenciales.
     *     @example
     *     // Create many Credenciales
     *     const credenciales = await prisma.credenciales.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends credencialesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, credencialesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Credenciales.
     * @param {credencialesDeleteArgs} args - Arguments to delete one Credenciales.
     * @example
     * // Delete one Credenciales
     * const Credenciales = await prisma.credenciales.delete({
     *   where: {
     *     // ... filter to delete one Credenciales
     *   }
     * })
     * 
    **/
    delete<T extends credencialesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, credencialesDeleteArgs<ExtArgs>>
    ): Prisma__credencialesClient<$Result.GetResult<Prisma.$credencialesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Credenciales.
     * @param {credencialesUpdateArgs} args - Arguments to update one Credenciales.
     * @example
     * // Update one Credenciales
     * const credenciales = await prisma.credenciales.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends credencialesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, credencialesUpdateArgs<ExtArgs>>
    ): Prisma__credencialesClient<$Result.GetResult<Prisma.$credencialesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Credenciales.
     * @param {credencialesDeleteManyArgs} args - Arguments to filter Credenciales to delete.
     * @example
     * // Delete a few Credenciales
     * const { count } = await prisma.credenciales.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends credencialesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, credencialesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Credenciales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {credencialesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Credenciales
     * const credenciales = await prisma.credenciales.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends credencialesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, credencialesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Credenciales.
     * @param {credencialesUpsertArgs} args - Arguments to update or create a Credenciales.
     * @example
     * // Update or create a Credenciales
     * const credenciales = await prisma.credenciales.upsert({
     *   create: {
     *     // ... data to create a Credenciales
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Credenciales we want to update
     *   }
     * })
    **/
    upsert<T extends credencialesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, credencialesUpsertArgs<ExtArgs>>
    ): Prisma__credencialesClient<$Result.GetResult<Prisma.$credencialesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Credenciales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {credencialesCountArgs} args - Arguments to filter Credenciales to count.
     * @example
     * // Count the number of Credenciales
     * const count = await prisma.credenciales.count({
     *   where: {
     *     // ... the filter for the Credenciales we want to count
     *   }
     * })
    **/
    count<T extends credencialesCountArgs>(
      args?: Subset<T, credencialesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CredencialesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Credenciales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredencialesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CredencialesAggregateArgs>(args: Subset<T, CredencialesAggregateArgs>): Prisma.PrismaPromise<GetCredencialesAggregateType<T>>

    /**
     * Group by Credenciales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {credencialesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends credencialesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: credencialesGroupByArgs['orderBy'] }
        : { orderBy?: credencialesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, credencialesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCredencialesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the credenciales model
   */
  readonly fields: credencialesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for credenciales.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__credencialesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the credenciales model
   */ 
  interface credencialesFieldRefs {
    readonly id: FieldRef<"credenciales", 'Int'>
    readonly pasarela: FieldRef<"credenciales", 'String'>
    readonly cliente_id: FieldRef<"credenciales", 'String'>
    readonly cliente_secret: FieldRef<"credenciales", 'String'>
  }
    

  // Custom InputTypes

  /**
   * credenciales findUnique
   */
  export type credencialesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the credenciales
     */
    select?: credencialesSelect<ExtArgs> | null
    /**
     * Filter, which credenciales to fetch.
     */
    where: credencialesWhereUniqueInput
  }


  /**
   * credenciales findUniqueOrThrow
   */
  export type credencialesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the credenciales
     */
    select?: credencialesSelect<ExtArgs> | null
    /**
     * Filter, which credenciales to fetch.
     */
    where: credencialesWhereUniqueInput
  }


  /**
   * credenciales findFirst
   */
  export type credencialesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the credenciales
     */
    select?: credencialesSelect<ExtArgs> | null
    /**
     * Filter, which credenciales to fetch.
     */
    where?: credencialesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of credenciales to fetch.
     */
    orderBy?: credencialesOrderByWithRelationInput | credencialesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for credenciales.
     */
    cursor?: credencialesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` credenciales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` credenciales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of credenciales.
     */
    distinct?: CredencialesScalarFieldEnum | CredencialesScalarFieldEnum[]
  }


  /**
   * credenciales findFirstOrThrow
   */
  export type credencialesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the credenciales
     */
    select?: credencialesSelect<ExtArgs> | null
    /**
     * Filter, which credenciales to fetch.
     */
    where?: credencialesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of credenciales to fetch.
     */
    orderBy?: credencialesOrderByWithRelationInput | credencialesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for credenciales.
     */
    cursor?: credencialesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` credenciales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` credenciales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of credenciales.
     */
    distinct?: CredencialesScalarFieldEnum | CredencialesScalarFieldEnum[]
  }


  /**
   * credenciales findMany
   */
  export type credencialesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the credenciales
     */
    select?: credencialesSelect<ExtArgs> | null
    /**
     * Filter, which credenciales to fetch.
     */
    where?: credencialesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of credenciales to fetch.
     */
    orderBy?: credencialesOrderByWithRelationInput | credencialesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing credenciales.
     */
    cursor?: credencialesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` credenciales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` credenciales.
     */
    skip?: number
    distinct?: CredencialesScalarFieldEnum | CredencialesScalarFieldEnum[]
  }


  /**
   * credenciales create
   */
  export type credencialesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the credenciales
     */
    select?: credencialesSelect<ExtArgs> | null
    /**
     * The data needed to create a credenciales.
     */
    data: XOR<credencialesCreateInput, credencialesUncheckedCreateInput>
  }


  /**
   * credenciales createMany
   */
  export type credencialesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many credenciales.
     */
    data: credencialesCreateManyInput | credencialesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * credenciales update
   */
  export type credencialesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the credenciales
     */
    select?: credencialesSelect<ExtArgs> | null
    /**
     * The data needed to update a credenciales.
     */
    data: XOR<credencialesUpdateInput, credencialesUncheckedUpdateInput>
    /**
     * Choose, which credenciales to update.
     */
    where: credencialesWhereUniqueInput
  }


  /**
   * credenciales updateMany
   */
  export type credencialesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update credenciales.
     */
    data: XOR<credencialesUpdateManyMutationInput, credencialesUncheckedUpdateManyInput>
    /**
     * Filter which credenciales to update
     */
    where?: credencialesWhereInput
  }


  /**
   * credenciales upsert
   */
  export type credencialesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the credenciales
     */
    select?: credencialesSelect<ExtArgs> | null
    /**
     * The filter to search for the credenciales to update in case it exists.
     */
    where: credencialesWhereUniqueInput
    /**
     * In case the credenciales found by the `where` argument doesn't exist, create a new credenciales with this data.
     */
    create: XOR<credencialesCreateInput, credencialesUncheckedCreateInput>
    /**
     * In case the credenciales was found with the provided `where` argument, update it with this data.
     */
    update: XOR<credencialesUpdateInput, credencialesUncheckedUpdateInput>
  }


  /**
   * credenciales delete
   */
  export type credencialesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the credenciales
     */
    select?: credencialesSelect<ExtArgs> | null
    /**
     * Filter which credenciales to delete.
     */
    where: credencialesWhereUniqueInput
  }


  /**
   * credenciales deleteMany
   */
  export type credencialesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which credenciales to delete
     */
    where?: credencialesWhereInput
  }


  /**
   * credenciales without action
   */
  export type credencialesDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the credenciales
     */
    select?: credencialesSelect<ExtArgs> | null
  }



  /**
   * Model pagos
   */

  export type AggregatePagos = {
    _count: PagosCountAggregateOutputType | null
    _avg: PagosAvgAggregateOutputType | null
    _sum: PagosSumAggregateOutputType | null
    _min: PagosMinAggregateOutputType | null
    _max: PagosMaxAggregateOutputType | null
  }

  export type PagosAvgAggregateOutputType = {
    id: number | null
    estado: number | null
  }

  export type PagosSumAggregateOutputType = {
    id: number | null
    estado: number | null
  }

  export type PagosMinAggregateOutputType = {
    id: number | null
    estado: number | null
  }

  export type PagosMaxAggregateOutputType = {
    id: number | null
    estado: number | null
  }

  export type PagosCountAggregateOutputType = {
    id: number
    estado: number
    _all: number
  }


  export type PagosAvgAggregateInputType = {
    id?: true
    estado?: true
  }

  export type PagosSumAggregateInputType = {
    id?: true
    estado?: true
  }

  export type PagosMinAggregateInputType = {
    id?: true
    estado?: true
  }

  export type PagosMaxAggregateInputType = {
    id?: true
    estado?: true
  }

  export type PagosCountAggregateInputType = {
    id?: true
    estado?: true
    _all?: true
  }

  export type PagosAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which pagos to aggregate.
     */
    where?: pagosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pagos to fetch.
     */
    orderBy?: pagosOrderByWithRelationInput | pagosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: pagosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned pagos
    **/
    _count?: true | PagosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PagosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PagosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PagosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PagosMaxAggregateInputType
  }

  export type GetPagosAggregateType<T extends PagosAggregateArgs> = {
        [P in keyof T & keyof AggregatePagos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePagos[P]>
      : GetScalarType<T[P], AggregatePagos[P]>
  }




  export type pagosGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: pagosWhereInput
    orderBy?: pagosOrderByWithAggregationInput | pagosOrderByWithAggregationInput[]
    by: PagosScalarFieldEnum[] | PagosScalarFieldEnum
    having?: pagosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PagosCountAggregateInputType | true
    _avg?: PagosAvgAggregateInputType
    _sum?: PagosSumAggregateInputType
    _min?: PagosMinAggregateInputType
    _max?: PagosMaxAggregateInputType
  }

  export type PagosGroupByOutputType = {
    id: number
    estado: number
    _count: PagosCountAggregateOutputType | null
    _avg: PagosAvgAggregateOutputType | null
    _sum: PagosSumAggregateOutputType | null
    _min: PagosMinAggregateOutputType | null
    _max: PagosMaxAggregateOutputType | null
  }

  type GetPagosGroupByPayload<T extends pagosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PagosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PagosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PagosGroupByOutputType[P]>
            : GetScalarType<T[P], PagosGroupByOutputType[P]>
        }
      >
    >


  export type pagosSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    estado?: boolean
  }, ExtArgs["result"]["pagos"]>

  export type pagosSelectScalar = {
    id?: boolean
    estado?: boolean
  }


  export type $pagosPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "pagos"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: number
      estado: number
    }, ExtArgs["result"]["pagos"]>
    composites: {}
  }


  type pagosGetPayload<S extends boolean | null | undefined | pagosDefaultArgs> = $Result.GetResult<Prisma.$pagosPayload, S>

  type pagosCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<pagosFindManyArgs, 'select' | 'include'> & {
      select?: PagosCountAggregateInputType | true
    }

  export interface pagosDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['pagos'], meta: { name: 'pagos' } }
    /**
     * Find zero or one Pagos that matches the filter.
     * @param {pagosFindUniqueArgs} args - Arguments to find a Pagos
     * @example
     * // Get one Pagos
     * const pagos = await prisma.pagos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends pagosFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, pagosFindUniqueArgs<ExtArgs>>
    ): Prisma__pagosClient<$Result.GetResult<Prisma.$pagosPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Pagos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {pagosFindUniqueOrThrowArgs} args - Arguments to find a Pagos
     * @example
     * // Get one Pagos
     * const pagos = await prisma.pagos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends pagosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, pagosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__pagosClient<$Result.GetResult<Prisma.$pagosPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Pagos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pagosFindFirstArgs} args - Arguments to find a Pagos
     * @example
     * // Get one Pagos
     * const pagos = await prisma.pagos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends pagosFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, pagosFindFirstArgs<ExtArgs>>
    ): Prisma__pagosClient<$Result.GetResult<Prisma.$pagosPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Pagos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pagosFindFirstOrThrowArgs} args - Arguments to find a Pagos
     * @example
     * // Get one Pagos
     * const pagos = await prisma.pagos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends pagosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, pagosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__pagosClient<$Result.GetResult<Prisma.$pagosPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Pagos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pagosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pagos
     * const pagos = await prisma.pagos.findMany()
     * 
     * // Get first 10 Pagos
     * const pagos = await prisma.pagos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pagosWithIdOnly = await prisma.pagos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends pagosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, pagosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$pagosPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Pagos.
     * @param {pagosCreateArgs} args - Arguments to create a Pagos.
     * @example
     * // Create one Pagos
     * const Pagos = await prisma.pagos.create({
     *   data: {
     *     // ... data to create a Pagos
     *   }
     * })
     * 
    **/
    create<T extends pagosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, pagosCreateArgs<ExtArgs>>
    ): Prisma__pagosClient<$Result.GetResult<Prisma.$pagosPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Pagos.
     *     @param {pagosCreateManyArgs} args - Arguments to create many Pagos.
     *     @example
     *     // Create many Pagos
     *     const pagos = await prisma.pagos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends pagosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, pagosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pagos.
     * @param {pagosDeleteArgs} args - Arguments to delete one Pagos.
     * @example
     * // Delete one Pagos
     * const Pagos = await prisma.pagos.delete({
     *   where: {
     *     // ... filter to delete one Pagos
     *   }
     * })
     * 
    **/
    delete<T extends pagosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, pagosDeleteArgs<ExtArgs>>
    ): Prisma__pagosClient<$Result.GetResult<Prisma.$pagosPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Pagos.
     * @param {pagosUpdateArgs} args - Arguments to update one Pagos.
     * @example
     * // Update one Pagos
     * const pagos = await prisma.pagos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends pagosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, pagosUpdateArgs<ExtArgs>>
    ): Prisma__pagosClient<$Result.GetResult<Prisma.$pagosPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Pagos.
     * @param {pagosDeleteManyArgs} args - Arguments to filter Pagos to delete.
     * @example
     * // Delete a few Pagos
     * const { count } = await prisma.pagos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends pagosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, pagosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pagos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pagosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pagos
     * const pagos = await prisma.pagos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends pagosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, pagosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pagos.
     * @param {pagosUpsertArgs} args - Arguments to update or create a Pagos.
     * @example
     * // Update or create a Pagos
     * const pagos = await prisma.pagos.upsert({
     *   create: {
     *     // ... data to create a Pagos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pagos we want to update
     *   }
     * })
    **/
    upsert<T extends pagosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, pagosUpsertArgs<ExtArgs>>
    ): Prisma__pagosClient<$Result.GetResult<Prisma.$pagosPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Pagos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pagosCountArgs} args - Arguments to filter Pagos to count.
     * @example
     * // Count the number of Pagos
     * const count = await prisma.pagos.count({
     *   where: {
     *     // ... the filter for the Pagos we want to count
     *   }
     * })
    **/
    count<T extends pagosCountArgs>(
      args?: Subset<T, pagosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PagosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pagos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PagosAggregateArgs>(args: Subset<T, PagosAggregateArgs>): Prisma.PrismaPromise<GetPagosAggregateType<T>>

    /**
     * Group by Pagos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pagosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends pagosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: pagosGroupByArgs['orderBy'] }
        : { orderBy?: pagosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, pagosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPagosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the pagos model
   */
  readonly fields: pagosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for pagos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__pagosClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the pagos model
   */ 
  interface pagosFieldRefs {
    readonly id: FieldRef<"pagos", 'Int'>
    readonly estado: FieldRef<"pagos", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * pagos findUnique
   */
  export type pagosFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pagos
     */
    select?: pagosSelect<ExtArgs> | null
    /**
     * Filter, which pagos to fetch.
     */
    where: pagosWhereUniqueInput
  }


  /**
   * pagos findUniqueOrThrow
   */
  export type pagosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pagos
     */
    select?: pagosSelect<ExtArgs> | null
    /**
     * Filter, which pagos to fetch.
     */
    where: pagosWhereUniqueInput
  }


  /**
   * pagos findFirst
   */
  export type pagosFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pagos
     */
    select?: pagosSelect<ExtArgs> | null
    /**
     * Filter, which pagos to fetch.
     */
    where?: pagosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pagos to fetch.
     */
    orderBy?: pagosOrderByWithRelationInput | pagosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pagos.
     */
    cursor?: pagosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pagos.
     */
    distinct?: PagosScalarFieldEnum | PagosScalarFieldEnum[]
  }


  /**
   * pagos findFirstOrThrow
   */
  export type pagosFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pagos
     */
    select?: pagosSelect<ExtArgs> | null
    /**
     * Filter, which pagos to fetch.
     */
    where?: pagosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pagos to fetch.
     */
    orderBy?: pagosOrderByWithRelationInput | pagosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pagos.
     */
    cursor?: pagosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pagos.
     */
    distinct?: PagosScalarFieldEnum | PagosScalarFieldEnum[]
  }


  /**
   * pagos findMany
   */
  export type pagosFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pagos
     */
    select?: pagosSelect<ExtArgs> | null
    /**
     * Filter, which pagos to fetch.
     */
    where?: pagosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pagos to fetch.
     */
    orderBy?: pagosOrderByWithRelationInput | pagosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing pagos.
     */
    cursor?: pagosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pagos.
     */
    skip?: number
    distinct?: PagosScalarFieldEnum | PagosScalarFieldEnum[]
  }


  /**
   * pagos create
   */
  export type pagosCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pagos
     */
    select?: pagosSelect<ExtArgs> | null
    /**
     * The data needed to create a pagos.
     */
    data: XOR<pagosCreateInput, pagosUncheckedCreateInput>
  }


  /**
   * pagos createMany
   */
  export type pagosCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many pagos.
     */
    data: pagosCreateManyInput | pagosCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * pagos update
   */
  export type pagosUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pagos
     */
    select?: pagosSelect<ExtArgs> | null
    /**
     * The data needed to update a pagos.
     */
    data: XOR<pagosUpdateInput, pagosUncheckedUpdateInput>
    /**
     * Choose, which pagos to update.
     */
    where: pagosWhereUniqueInput
  }


  /**
   * pagos updateMany
   */
  export type pagosUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update pagos.
     */
    data: XOR<pagosUpdateManyMutationInput, pagosUncheckedUpdateManyInput>
    /**
     * Filter which pagos to update
     */
    where?: pagosWhereInput
  }


  /**
   * pagos upsert
   */
  export type pagosUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pagos
     */
    select?: pagosSelect<ExtArgs> | null
    /**
     * The filter to search for the pagos to update in case it exists.
     */
    where: pagosWhereUniqueInput
    /**
     * In case the pagos found by the `where` argument doesn't exist, create a new pagos with this data.
     */
    create: XOR<pagosCreateInput, pagosUncheckedCreateInput>
    /**
     * In case the pagos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<pagosUpdateInput, pagosUncheckedUpdateInput>
  }


  /**
   * pagos delete
   */
  export type pagosDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pagos
     */
    select?: pagosSelect<ExtArgs> | null
    /**
     * Filter which pagos to delete.
     */
    where: pagosWhereUniqueInput
  }


  /**
   * pagos deleteMany
   */
  export type pagosDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which pagos to delete
     */
    where?: pagosWhereInput
  }


  /**
   * pagos without action
   */
  export type pagosDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pagos
     */
    select?: pagosSelect<ExtArgs> | null
  }



  /**
   * Model producto_cantidad
   */

  export type AggregateProducto_cantidad = {
    _count: Producto_cantidadCountAggregateOutputType | null
    _avg: Producto_cantidadAvgAggregateOutputType | null
    _sum: Producto_cantidadSumAggregateOutputType | null
    _min: Producto_cantidadMinAggregateOutputType | null
    _max: Producto_cantidadMaxAggregateOutputType | null
  }

  export type Producto_cantidadAvgAggregateOutputType = {
    id: number | null
    idProducto: number | null
    cantidad: number | null
    precio_ars: number | null
    precio_usd: number | null
    precio_eur: number | null
  }

  export type Producto_cantidadSumAggregateOutputType = {
    id: number | null
    idProducto: number | null
    cantidad: number | null
    precio_ars: number | null
    precio_usd: number | null
    precio_eur: number | null
  }

  export type Producto_cantidadMinAggregateOutputType = {
    id: number | null
    idProducto: number | null
    cantidad: number | null
    precio_ars: number | null
    precio_usd: number | null
    precio_eur: number | null
  }

  export type Producto_cantidadMaxAggregateOutputType = {
    id: number | null
    idProducto: number | null
    cantidad: number | null
    precio_ars: number | null
    precio_usd: number | null
    precio_eur: number | null
  }

  export type Producto_cantidadCountAggregateOutputType = {
    id: number
    idProducto: number
    cantidad: number
    precio_ars: number
    precio_usd: number
    precio_eur: number
    _all: number
  }


  export type Producto_cantidadAvgAggregateInputType = {
    id?: true
    idProducto?: true
    cantidad?: true
    precio_ars?: true
    precio_usd?: true
    precio_eur?: true
  }

  export type Producto_cantidadSumAggregateInputType = {
    id?: true
    idProducto?: true
    cantidad?: true
    precio_ars?: true
    precio_usd?: true
    precio_eur?: true
  }

  export type Producto_cantidadMinAggregateInputType = {
    id?: true
    idProducto?: true
    cantidad?: true
    precio_ars?: true
    precio_usd?: true
    precio_eur?: true
  }

  export type Producto_cantidadMaxAggregateInputType = {
    id?: true
    idProducto?: true
    cantidad?: true
    precio_ars?: true
    precio_usd?: true
    precio_eur?: true
  }

  export type Producto_cantidadCountAggregateInputType = {
    id?: true
    idProducto?: true
    cantidad?: true
    precio_ars?: true
    precio_usd?: true
    precio_eur?: true
    _all?: true
  }

  export type Producto_cantidadAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which producto_cantidad to aggregate.
     */
    where?: producto_cantidadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of producto_cantidads to fetch.
     */
    orderBy?: producto_cantidadOrderByWithRelationInput | producto_cantidadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: producto_cantidadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` producto_cantidads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` producto_cantidads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned producto_cantidads
    **/
    _count?: true | Producto_cantidadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Producto_cantidadAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Producto_cantidadSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Producto_cantidadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Producto_cantidadMaxAggregateInputType
  }

  export type GetProducto_cantidadAggregateType<T extends Producto_cantidadAggregateArgs> = {
        [P in keyof T & keyof AggregateProducto_cantidad]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducto_cantidad[P]>
      : GetScalarType<T[P], AggregateProducto_cantidad[P]>
  }




  export type producto_cantidadGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: producto_cantidadWhereInput
    orderBy?: producto_cantidadOrderByWithAggregationInput | producto_cantidadOrderByWithAggregationInput[]
    by: Producto_cantidadScalarFieldEnum[] | Producto_cantidadScalarFieldEnum
    having?: producto_cantidadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Producto_cantidadCountAggregateInputType | true
    _avg?: Producto_cantidadAvgAggregateInputType
    _sum?: Producto_cantidadSumAggregateInputType
    _min?: Producto_cantidadMinAggregateInputType
    _max?: Producto_cantidadMaxAggregateInputType
  }

  export type Producto_cantidadGroupByOutputType = {
    id: number
    idProducto: number
    cantidad: number
    precio_ars: number
    precio_usd: number
    precio_eur: number
    _count: Producto_cantidadCountAggregateOutputType | null
    _avg: Producto_cantidadAvgAggregateOutputType | null
    _sum: Producto_cantidadSumAggregateOutputType | null
    _min: Producto_cantidadMinAggregateOutputType | null
    _max: Producto_cantidadMaxAggregateOutputType | null
  }

  type GetProducto_cantidadGroupByPayload<T extends producto_cantidadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Producto_cantidadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Producto_cantidadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Producto_cantidadGroupByOutputType[P]>
            : GetScalarType<T[P], Producto_cantidadGroupByOutputType[P]>
        }
      >
    >


  export type producto_cantidadSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    idProducto?: boolean
    cantidad?: boolean
    precio_ars?: boolean
    precio_usd?: boolean
    precio_eur?: boolean
    productos?: boolean | productosDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["producto_cantidad"]>

  export type producto_cantidadSelectScalar = {
    id?: boolean
    idProducto?: boolean
    cantidad?: boolean
    precio_ars?: boolean
    precio_usd?: boolean
    precio_eur?: boolean
  }

  export type producto_cantidadInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    productos?: boolean | productosDefaultArgs<ExtArgs>
  }


  export type $producto_cantidadPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "producto_cantidad"
    objects: {
      productos: Prisma.$productosPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      idProducto: number
      cantidad: number
      precio_ars: number
      precio_usd: number
      precio_eur: number
    }, ExtArgs["result"]["producto_cantidad"]>
    composites: {}
  }


  type producto_cantidadGetPayload<S extends boolean | null | undefined | producto_cantidadDefaultArgs> = $Result.GetResult<Prisma.$producto_cantidadPayload, S>

  type producto_cantidadCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<producto_cantidadFindManyArgs, 'select' | 'include'> & {
      select?: Producto_cantidadCountAggregateInputType | true
    }

  export interface producto_cantidadDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['producto_cantidad'], meta: { name: 'producto_cantidad' } }
    /**
     * Find zero or one Producto_cantidad that matches the filter.
     * @param {producto_cantidadFindUniqueArgs} args - Arguments to find a Producto_cantidad
     * @example
     * // Get one Producto_cantidad
     * const producto_cantidad = await prisma.producto_cantidad.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends producto_cantidadFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, producto_cantidadFindUniqueArgs<ExtArgs>>
    ): Prisma__producto_cantidadClient<$Result.GetResult<Prisma.$producto_cantidadPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Producto_cantidad that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {producto_cantidadFindUniqueOrThrowArgs} args - Arguments to find a Producto_cantidad
     * @example
     * // Get one Producto_cantidad
     * const producto_cantidad = await prisma.producto_cantidad.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends producto_cantidadFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, producto_cantidadFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__producto_cantidadClient<$Result.GetResult<Prisma.$producto_cantidadPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Producto_cantidad that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {producto_cantidadFindFirstArgs} args - Arguments to find a Producto_cantidad
     * @example
     * // Get one Producto_cantidad
     * const producto_cantidad = await prisma.producto_cantidad.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends producto_cantidadFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, producto_cantidadFindFirstArgs<ExtArgs>>
    ): Prisma__producto_cantidadClient<$Result.GetResult<Prisma.$producto_cantidadPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Producto_cantidad that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {producto_cantidadFindFirstOrThrowArgs} args - Arguments to find a Producto_cantidad
     * @example
     * // Get one Producto_cantidad
     * const producto_cantidad = await prisma.producto_cantidad.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends producto_cantidadFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, producto_cantidadFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__producto_cantidadClient<$Result.GetResult<Prisma.$producto_cantidadPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Producto_cantidads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {producto_cantidadFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Producto_cantidads
     * const producto_cantidads = await prisma.producto_cantidad.findMany()
     * 
     * // Get first 10 Producto_cantidads
     * const producto_cantidads = await prisma.producto_cantidad.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const producto_cantidadWithIdOnly = await prisma.producto_cantidad.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends producto_cantidadFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, producto_cantidadFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$producto_cantidadPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Producto_cantidad.
     * @param {producto_cantidadCreateArgs} args - Arguments to create a Producto_cantidad.
     * @example
     * // Create one Producto_cantidad
     * const Producto_cantidad = await prisma.producto_cantidad.create({
     *   data: {
     *     // ... data to create a Producto_cantidad
     *   }
     * })
     * 
    **/
    create<T extends producto_cantidadCreateArgs<ExtArgs>>(
      args: SelectSubset<T, producto_cantidadCreateArgs<ExtArgs>>
    ): Prisma__producto_cantidadClient<$Result.GetResult<Prisma.$producto_cantidadPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Producto_cantidads.
     *     @param {producto_cantidadCreateManyArgs} args - Arguments to create many Producto_cantidads.
     *     @example
     *     // Create many Producto_cantidads
     *     const producto_cantidad = await prisma.producto_cantidad.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends producto_cantidadCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, producto_cantidadCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Producto_cantidad.
     * @param {producto_cantidadDeleteArgs} args - Arguments to delete one Producto_cantidad.
     * @example
     * // Delete one Producto_cantidad
     * const Producto_cantidad = await prisma.producto_cantidad.delete({
     *   where: {
     *     // ... filter to delete one Producto_cantidad
     *   }
     * })
     * 
    **/
    delete<T extends producto_cantidadDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, producto_cantidadDeleteArgs<ExtArgs>>
    ): Prisma__producto_cantidadClient<$Result.GetResult<Prisma.$producto_cantidadPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Producto_cantidad.
     * @param {producto_cantidadUpdateArgs} args - Arguments to update one Producto_cantidad.
     * @example
     * // Update one Producto_cantidad
     * const producto_cantidad = await prisma.producto_cantidad.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends producto_cantidadUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, producto_cantidadUpdateArgs<ExtArgs>>
    ): Prisma__producto_cantidadClient<$Result.GetResult<Prisma.$producto_cantidadPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Producto_cantidads.
     * @param {producto_cantidadDeleteManyArgs} args - Arguments to filter Producto_cantidads to delete.
     * @example
     * // Delete a few Producto_cantidads
     * const { count } = await prisma.producto_cantidad.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends producto_cantidadDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, producto_cantidadDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Producto_cantidads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {producto_cantidadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Producto_cantidads
     * const producto_cantidad = await prisma.producto_cantidad.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends producto_cantidadUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, producto_cantidadUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Producto_cantidad.
     * @param {producto_cantidadUpsertArgs} args - Arguments to update or create a Producto_cantidad.
     * @example
     * // Update or create a Producto_cantidad
     * const producto_cantidad = await prisma.producto_cantidad.upsert({
     *   create: {
     *     // ... data to create a Producto_cantidad
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Producto_cantidad we want to update
     *   }
     * })
    **/
    upsert<T extends producto_cantidadUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, producto_cantidadUpsertArgs<ExtArgs>>
    ): Prisma__producto_cantidadClient<$Result.GetResult<Prisma.$producto_cantidadPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Producto_cantidads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {producto_cantidadCountArgs} args - Arguments to filter Producto_cantidads to count.
     * @example
     * // Count the number of Producto_cantidads
     * const count = await prisma.producto_cantidad.count({
     *   where: {
     *     // ... the filter for the Producto_cantidads we want to count
     *   }
     * })
    **/
    count<T extends producto_cantidadCountArgs>(
      args?: Subset<T, producto_cantidadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Producto_cantidadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Producto_cantidad.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Producto_cantidadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Producto_cantidadAggregateArgs>(args: Subset<T, Producto_cantidadAggregateArgs>): Prisma.PrismaPromise<GetProducto_cantidadAggregateType<T>>

    /**
     * Group by Producto_cantidad.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {producto_cantidadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends producto_cantidadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: producto_cantidadGroupByArgs['orderBy'] }
        : { orderBy?: producto_cantidadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, producto_cantidadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProducto_cantidadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the producto_cantidad model
   */
  readonly fields: producto_cantidadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for producto_cantidad.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__producto_cantidadClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    productos<T extends productosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productosDefaultArgs<ExtArgs>>): Prisma__productosClient<$Result.GetResult<Prisma.$productosPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the producto_cantidad model
   */ 
  interface producto_cantidadFieldRefs {
    readonly id: FieldRef<"producto_cantidad", 'Int'>
    readonly idProducto: FieldRef<"producto_cantidad", 'Int'>
    readonly cantidad: FieldRef<"producto_cantidad", 'Int'>
    readonly precio_ars: FieldRef<"producto_cantidad", 'Int'>
    readonly precio_usd: FieldRef<"producto_cantidad", 'Int'>
    readonly precio_eur: FieldRef<"producto_cantidad", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * producto_cantidad findUnique
   */
  export type producto_cantidadFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto_cantidad
     */
    select?: producto_cantidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: producto_cantidadInclude<ExtArgs> | null
    /**
     * Filter, which producto_cantidad to fetch.
     */
    where: producto_cantidadWhereUniqueInput
  }


  /**
   * producto_cantidad findUniqueOrThrow
   */
  export type producto_cantidadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto_cantidad
     */
    select?: producto_cantidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: producto_cantidadInclude<ExtArgs> | null
    /**
     * Filter, which producto_cantidad to fetch.
     */
    where: producto_cantidadWhereUniqueInput
  }


  /**
   * producto_cantidad findFirst
   */
  export type producto_cantidadFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto_cantidad
     */
    select?: producto_cantidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: producto_cantidadInclude<ExtArgs> | null
    /**
     * Filter, which producto_cantidad to fetch.
     */
    where?: producto_cantidadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of producto_cantidads to fetch.
     */
    orderBy?: producto_cantidadOrderByWithRelationInput | producto_cantidadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for producto_cantidads.
     */
    cursor?: producto_cantidadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` producto_cantidads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` producto_cantidads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of producto_cantidads.
     */
    distinct?: Producto_cantidadScalarFieldEnum | Producto_cantidadScalarFieldEnum[]
  }


  /**
   * producto_cantidad findFirstOrThrow
   */
  export type producto_cantidadFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto_cantidad
     */
    select?: producto_cantidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: producto_cantidadInclude<ExtArgs> | null
    /**
     * Filter, which producto_cantidad to fetch.
     */
    where?: producto_cantidadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of producto_cantidads to fetch.
     */
    orderBy?: producto_cantidadOrderByWithRelationInput | producto_cantidadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for producto_cantidads.
     */
    cursor?: producto_cantidadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` producto_cantidads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` producto_cantidads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of producto_cantidads.
     */
    distinct?: Producto_cantidadScalarFieldEnum | Producto_cantidadScalarFieldEnum[]
  }


  /**
   * producto_cantidad findMany
   */
  export type producto_cantidadFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto_cantidad
     */
    select?: producto_cantidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: producto_cantidadInclude<ExtArgs> | null
    /**
     * Filter, which producto_cantidads to fetch.
     */
    where?: producto_cantidadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of producto_cantidads to fetch.
     */
    orderBy?: producto_cantidadOrderByWithRelationInput | producto_cantidadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing producto_cantidads.
     */
    cursor?: producto_cantidadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` producto_cantidads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` producto_cantidads.
     */
    skip?: number
    distinct?: Producto_cantidadScalarFieldEnum | Producto_cantidadScalarFieldEnum[]
  }


  /**
   * producto_cantidad create
   */
  export type producto_cantidadCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto_cantidad
     */
    select?: producto_cantidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: producto_cantidadInclude<ExtArgs> | null
    /**
     * The data needed to create a producto_cantidad.
     */
    data: XOR<producto_cantidadCreateInput, producto_cantidadUncheckedCreateInput>
  }


  /**
   * producto_cantidad createMany
   */
  export type producto_cantidadCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many producto_cantidads.
     */
    data: producto_cantidadCreateManyInput | producto_cantidadCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * producto_cantidad update
   */
  export type producto_cantidadUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto_cantidad
     */
    select?: producto_cantidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: producto_cantidadInclude<ExtArgs> | null
    /**
     * The data needed to update a producto_cantidad.
     */
    data: XOR<producto_cantidadUpdateInput, producto_cantidadUncheckedUpdateInput>
    /**
     * Choose, which producto_cantidad to update.
     */
    where: producto_cantidadWhereUniqueInput
  }


  /**
   * producto_cantidad updateMany
   */
  export type producto_cantidadUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update producto_cantidads.
     */
    data: XOR<producto_cantidadUpdateManyMutationInput, producto_cantidadUncheckedUpdateManyInput>
    /**
     * Filter which producto_cantidads to update
     */
    where?: producto_cantidadWhereInput
  }


  /**
   * producto_cantidad upsert
   */
  export type producto_cantidadUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto_cantidad
     */
    select?: producto_cantidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: producto_cantidadInclude<ExtArgs> | null
    /**
     * The filter to search for the producto_cantidad to update in case it exists.
     */
    where: producto_cantidadWhereUniqueInput
    /**
     * In case the producto_cantidad found by the `where` argument doesn't exist, create a new producto_cantidad with this data.
     */
    create: XOR<producto_cantidadCreateInput, producto_cantidadUncheckedCreateInput>
    /**
     * In case the producto_cantidad was found with the provided `where` argument, update it with this data.
     */
    update: XOR<producto_cantidadUpdateInput, producto_cantidadUncheckedUpdateInput>
  }


  /**
   * producto_cantidad delete
   */
  export type producto_cantidadDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto_cantidad
     */
    select?: producto_cantidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: producto_cantidadInclude<ExtArgs> | null
    /**
     * Filter which producto_cantidad to delete.
     */
    where: producto_cantidadWhereUniqueInput
  }


  /**
   * producto_cantidad deleteMany
   */
  export type producto_cantidadDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which producto_cantidads to delete
     */
    where?: producto_cantidadWhereInput
  }


  /**
   * producto_cantidad without action
   */
  export type producto_cantidadDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto_cantidad
     */
    select?: producto_cantidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: producto_cantidadInclude<ExtArgs> | null
  }



  /**
   * Model productos
   */

  export type AggregateProductos = {
    _count: ProductosCountAggregateOutputType | null
    _avg: ProductosAvgAggregateOutputType | null
    _sum: ProductosSumAggregateOutputType | null
    _min: ProductosMinAggregateOutputType | null
    _max: ProductosMaxAggregateOutputType | null
  }

  export type ProductosAvgAggregateOutputType = {
    id: number | null
    id_social: number | null
  }

  export type ProductosSumAggregateOutputType = {
    id: number | null
    id_social: number | null
  }

  export type ProductosMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    imagen: string | null
    id_social: number | null
  }

  export type ProductosMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    imagen: string | null
    id_social: number | null
  }

  export type ProductosCountAggregateOutputType = {
    id: number
    nombre: number
    imagen: number
    id_social: number
    _all: number
  }


  export type ProductosAvgAggregateInputType = {
    id?: true
    id_social?: true
  }

  export type ProductosSumAggregateInputType = {
    id?: true
    id_social?: true
  }

  export type ProductosMinAggregateInputType = {
    id?: true
    nombre?: true
    imagen?: true
    id_social?: true
  }

  export type ProductosMaxAggregateInputType = {
    id?: true
    nombre?: true
    imagen?: true
    id_social?: true
  }

  export type ProductosCountAggregateInputType = {
    id?: true
    nombre?: true
    imagen?: true
    id_social?: true
    _all?: true
  }

  export type ProductosAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which productos to aggregate.
     */
    where?: productosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productos to fetch.
     */
    orderBy?: productosOrderByWithRelationInput | productosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned productos
    **/
    _count?: true | ProductosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductosMaxAggregateInputType
  }

  export type GetProductosAggregateType<T extends ProductosAggregateArgs> = {
        [P in keyof T & keyof AggregateProductos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductos[P]>
      : GetScalarType<T[P], AggregateProductos[P]>
  }




  export type productosGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: productosWhereInput
    orderBy?: productosOrderByWithAggregationInput | productosOrderByWithAggregationInput[]
    by: ProductosScalarFieldEnum[] | ProductosScalarFieldEnum
    having?: productosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductosCountAggregateInputType | true
    _avg?: ProductosAvgAggregateInputType
    _sum?: ProductosSumAggregateInputType
    _min?: ProductosMinAggregateInputType
    _max?: ProductosMaxAggregateInputType
  }

  export type ProductosGroupByOutputType = {
    id: number
    nombre: string
    imagen: string
    id_social: number
    _count: ProductosCountAggregateOutputType | null
    _avg: ProductosAvgAggregateOutputType | null
    _sum: ProductosSumAggregateOutputType | null
    _min: ProductosMinAggregateOutputType | null
    _max: ProductosMaxAggregateOutputType | null
  }

  type GetProductosGroupByPayload<T extends productosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductosGroupByOutputType[P]>
            : GetScalarType<T[P], ProductosGroupByOutputType[P]>
        }
      >
    >


  export type productosSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    imagen?: boolean
    id_social?: boolean
    social?: boolean | socialDefaultArgs<ExtArgs>
    producto_cantidad?: boolean | productos$producto_cantidadArgs<ExtArgs>
    _count?: boolean | ProductosCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productos"]>

  export type productosSelectScalar = {
    id?: boolean
    nombre?: boolean
    imagen?: boolean
    id_social?: boolean
  }

  export type productosInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    social?: boolean | socialDefaultArgs<ExtArgs>
    producto_cantidad?: boolean | productos$producto_cantidadArgs<ExtArgs>
    _count?: boolean | ProductosCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $productosPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "productos"
    objects: {
      social: Prisma.$socialPayload<ExtArgs>
      producto_cantidad: Prisma.$producto_cantidadPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      nombre: string
      imagen: string
      id_social: number
    }, ExtArgs["result"]["productos"]>
    composites: {}
  }


  type productosGetPayload<S extends boolean | null | undefined | productosDefaultArgs> = $Result.GetResult<Prisma.$productosPayload, S>

  type productosCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<productosFindManyArgs, 'select' | 'include'> & {
      select?: ProductosCountAggregateInputType | true
    }

  export interface productosDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['productos'], meta: { name: 'productos' } }
    /**
     * Find zero or one Productos that matches the filter.
     * @param {productosFindUniqueArgs} args - Arguments to find a Productos
     * @example
     * // Get one Productos
     * const productos = await prisma.productos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productosFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, productosFindUniqueArgs<ExtArgs>>
    ): Prisma__productosClient<$Result.GetResult<Prisma.$productosPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Productos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {productosFindUniqueOrThrowArgs} args - Arguments to find a Productos
     * @example
     * // Get one Productos
     * const productos = await prisma.productos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends productosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__productosClient<$Result.GetResult<Prisma.$productosPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Productos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productosFindFirstArgs} args - Arguments to find a Productos
     * @example
     * // Get one Productos
     * const productos = await prisma.productos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productosFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, productosFindFirstArgs<ExtArgs>>
    ): Prisma__productosClient<$Result.GetResult<Prisma.$productosPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Productos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productosFindFirstOrThrowArgs} args - Arguments to find a Productos
     * @example
     * // Get one Productos
     * const productos = await prisma.productos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends productosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__productosClient<$Result.GetResult<Prisma.$productosPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Productos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Productos
     * const productos = await prisma.productos.findMany()
     * 
     * // Get first 10 Productos
     * const productos = await prisma.productos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productosWithIdOnly = await prisma.productos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends productosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productosPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Productos.
     * @param {productosCreateArgs} args - Arguments to create a Productos.
     * @example
     * // Create one Productos
     * const Productos = await prisma.productos.create({
     *   data: {
     *     // ... data to create a Productos
     *   }
     * })
     * 
    **/
    create<T extends productosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, productosCreateArgs<ExtArgs>>
    ): Prisma__productosClient<$Result.GetResult<Prisma.$productosPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Productos.
     *     @param {productosCreateManyArgs} args - Arguments to create many Productos.
     *     @example
     *     // Create many Productos
     *     const productos = await prisma.productos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends productosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Productos.
     * @param {productosDeleteArgs} args - Arguments to delete one Productos.
     * @example
     * // Delete one Productos
     * const Productos = await prisma.productos.delete({
     *   where: {
     *     // ... filter to delete one Productos
     *   }
     * })
     * 
    **/
    delete<T extends productosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, productosDeleteArgs<ExtArgs>>
    ): Prisma__productosClient<$Result.GetResult<Prisma.$productosPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Productos.
     * @param {productosUpdateArgs} args - Arguments to update one Productos.
     * @example
     * // Update one Productos
     * const productos = await prisma.productos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, productosUpdateArgs<ExtArgs>>
    ): Prisma__productosClient<$Result.GetResult<Prisma.$productosPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Productos.
     * @param {productosDeleteManyArgs} args - Arguments to filter Productos to delete.
     * @example
     * // Delete a few Productos
     * const { count } = await prisma.productos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Productos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Productos
     * const productos = await prisma.productos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, productosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Productos.
     * @param {productosUpsertArgs} args - Arguments to update or create a Productos.
     * @example
     * // Update or create a Productos
     * const productos = await prisma.productos.upsert({
     *   create: {
     *     // ... data to create a Productos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Productos we want to update
     *   }
     * })
    **/
    upsert<T extends productosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, productosUpsertArgs<ExtArgs>>
    ): Prisma__productosClient<$Result.GetResult<Prisma.$productosPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Productos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productosCountArgs} args - Arguments to filter Productos to count.
     * @example
     * // Count the number of Productos
     * const count = await prisma.productos.count({
     *   where: {
     *     // ... the filter for the Productos we want to count
     *   }
     * })
    **/
    count<T extends productosCountArgs>(
      args?: Subset<T, productosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Productos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductosAggregateArgs>(args: Subset<T, ProductosAggregateArgs>): Prisma.PrismaPromise<GetProductosAggregateType<T>>

    /**
     * Group by Productos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productosGroupByArgs['orderBy'] }
        : { orderBy?: productosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the productos model
   */
  readonly fields: productosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for productos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__productosClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    social<T extends socialDefaultArgs<ExtArgs> = {}>(args?: Subset<T, socialDefaultArgs<ExtArgs>>): Prisma__socialClient<$Result.GetResult<Prisma.$socialPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    producto_cantidad<T extends productos$producto_cantidadArgs<ExtArgs> = {}>(args?: Subset<T, productos$producto_cantidadArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$producto_cantidadPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the productos model
   */ 
  interface productosFieldRefs {
    readonly id: FieldRef<"productos", 'Int'>
    readonly nombre: FieldRef<"productos", 'String'>
    readonly imagen: FieldRef<"productos", 'String'>
    readonly id_social: FieldRef<"productos", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * productos findUnique
   */
  export type productosFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productos
     */
    select?: productosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productosInclude<ExtArgs> | null
    /**
     * Filter, which productos to fetch.
     */
    where: productosWhereUniqueInput
  }


  /**
   * productos findUniqueOrThrow
   */
  export type productosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productos
     */
    select?: productosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productosInclude<ExtArgs> | null
    /**
     * Filter, which productos to fetch.
     */
    where: productosWhereUniqueInput
  }


  /**
   * productos findFirst
   */
  export type productosFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productos
     */
    select?: productosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productosInclude<ExtArgs> | null
    /**
     * Filter, which productos to fetch.
     */
    where?: productosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productos to fetch.
     */
    orderBy?: productosOrderByWithRelationInput | productosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productos.
     */
    cursor?: productosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productos.
     */
    distinct?: ProductosScalarFieldEnum | ProductosScalarFieldEnum[]
  }


  /**
   * productos findFirstOrThrow
   */
  export type productosFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productos
     */
    select?: productosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productosInclude<ExtArgs> | null
    /**
     * Filter, which productos to fetch.
     */
    where?: productosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productos to fetch.
     */
    orderBy?: productosOrderByWithRelationInput | productosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productos.
     */
    cursor?: productosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productos.
     */
    distinct?: ProductosScalarFieldEnum | ProductosScalarFieldEnum[]
  }


  /**
   * productos findMany
   */
  export type productosFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productos
     */
    select?: productosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productosInclude<ExtArgs> | null
    /**
     * Filter, which productos to fetch.
     */
    where?: productosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productos to fetch.
     */
    orderBy?: productosOrderByWithRelationInput | productosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing productos.
     */
    cursor?: productosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productos.
     */
    skip?: number
    distinct?: ProductosScalarFieldEnum | ProductosScalarFieldEnum[]
  }


  /**
   * productos create
   */
  export type productosCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productos
     */
    select?: productosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productosInclude<ExtArgs> | null
    /**
     * The data needed to create a productos.
     */
    data: XOR<productosCreateInput, productosUncheckedCreateInput>
  }


  /**
   * productos createMany
   */
  export type productosCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many productos.
     */
    data: productosCreateManyInput | productosCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * productos update
   */
  export type productosUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productos
     */
    select?: productosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productosInclude<ExtArgs> | null
    /**
     * The data needed to update a productos.
     */
    data: XOR<productosUpdateInput, productosUncheckedUpdateInput>
    /**
     * Choose, which productos to update.
     */
    where: productosWhereUniqueInput
  }


  /**
   * productos updateMany
   */
  export type productosUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update productos.
     */
    data: XOR<productosUpdateManyMutationInput, productosUncheckedUpdateManyInput>
    /**
     * Filter which productos to update
     */
    where?: productosWhereInput
  }


  /**
   * productos upsert
   */
  export type productosUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productos
     */
    select?: productosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productosInclude<ExtArgs> | null
    /**
     * The filter to search for the productos to update in case it exists.
     */
    where: productosWhereUniqueInput
    /**
     * In case the productos found by the `where` argument doesn't exist, create a new productos with this data.
     */
    create: XOR<productosCreateInput, productosUncheckedCreateInput>
    /**
     * In case the productos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productosUpdateInput, productosUncheckedUpdateInput>
  }


  /**
   * productos delete
   */
  export type productosDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productos
     */
    select?: productosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productosInclude<ExtArgs> | null
    /**
     * Filter which productos to delete.
     */
    where: productosWhereUniqueInput
  }


  /**
   * productos deleteMany
   */
  export type productosDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which productos to delete
     */
    where?: productosWhereInput
  }


  /**
   * productos.producto_cantidad
   */
  export type productos$producto_cantidadArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto_cantidad
     */
    select?: producto_cantidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: producto_cantidadInclude<ExtArgs> | null
    where?: producto_cantidadWhereInput
    orderBy?: producto_cantidadOrderByWithRelationInput | producto_cantidadOrderByWithRelationInput[]
    cursor?: producto_cantidadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Producto_cantidadScalarFieldEnum | Producto_cantidadScalarFieldEnum[]
  }


  /**
   * productos without action
   */
  export type productosDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productos
     */
    select?: productosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productosInclude<ExtArgs> | null
  }



  /**
   * Model social
   */

  export type AggregateSocial = {
    _count: SocialCountAggregateOutputType | null
    _avg: SocialAvgAggregateOutputType | null
    _sum: SocialSumAggregateOutputType | null
    _min: SocialMinAggregateOutputType | null
    _max: SocialMaxAggregateOutputType | null
  }

  export type SocialAvgAggregateOutputType = {
    id: number | null
  }

  export type SocialSumAggregateOutputType = {
    id: number | null
  }

  export type SocialMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    imagen: string | null
  }

  export type SocialMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    imagen: string | null
  }

  export type SocialCountAggregateOutputType = {
    id: number
    nombre: number
    imagen: number
    _all: number
  }


  export type SocialAvgAggregateInputType = {
    id?: true
  }

  export type SocialSumAggregateInputType = {
    id?: true
  }

  export type SocialMinAggregateInputType = {
    id?: true
    nombre?: true
    imagen?: true
  }

  export type SocialMaxAggregateInputType = {
    id?: true
    nombre?: true
    imagen?: true
  }

  export type SocialCountAggregateInputType = {
    id?: true
    nombre?: true
    imagen?: true
    _all?: true
  }

  export type SocialAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which social to aggregate.
     */
    where?: socialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of socials to fetch.
     */
    orderBy?: socialOrderByWithRelationInput | socialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: socialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` socials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` socials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned socials
    **/
    _count?: true | SocialCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SocialAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SocialSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SocialMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SocialMaxAggregateInputType
  }

  export type GetSocialAggregateType<T extends SocialAggregateArgs> = {
        [P in keyof T & keyof AggregateSocial]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSocial[P]>
      : GetScalarType<T[P], AggregateSocial[P]>
  }




  export type socialGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: socialWhereInput
    orderBy?: socialOrderByWithAggregationInput | socialOrderByWithAggregationInput[]
    by: SocialScalarFieldEnum[] | SocialScalarFieldEnum
    having?: socialScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SocialCountAggregateInputType | true
    _avg?: SocialAvgAggregateInputType
    _sum?: SocialSumAggregateInputType
    _min?: SocialMinAggregateInputType
    _max?: SocialMaxAggregateInputType
  }

  export type SocialGroupByOutputType = {
    id: number
    nombre: string
    imagen: string
    _count: SocialCountAggregateOutputType | null
    _avg: SocialAvgAggregateOutputType | null
    _sum: SocialSumAggregateOutputType | null
    _min: SocialMinAggregateOutputType | null
    _max: SocialMaxAggregateOutputType | null
  }

  type GetSocialGroupByPayload<T extends socialGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SocialGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SocialGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SocialGroupByOutputType[P]>
            : GetScalarType<T[P], SocialGroupByOutputType[P]>
        }
      >
    >


  export type socialSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    imagen?: boolean
    productos?: boolean | social$productosArgs<ExtArgs>
    _count?: boolean | SocialCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["social"]>

  export type socialSelectScalar = {
    id?: boolean
    nombre?: boolean
    imagen?: boolean
  }

  export type socialInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    productos?: boolean | social$productosArgs<ExtArgs>
    _count?: boolean | SocialCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $socialPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "social"
    objects: {
      productos: Prisma.$productosPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      nombre: string
      imagen: string
    }, ExtArgs["result"]["social"]>
    composites: {}
  }


  type socialGetPayload<S extends boolean | null | undefined | socialDefaultArgs> = $Result.GetResult<Prisma.$socialPayload, S>

  type socialCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<socialFindManyArgs, 'select' | 'include'> & {
      select?: SocialCountAggregateInputType | true
    }

  export interface socialDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['social'], meta: { name: 'social' } }
    /**
     * Find zero or one Social that matches the filter.
     * @param {socialFindUniqueArgs} args - Arguments to find a Social
     * @example
     * // Get one Social
     * const social = await prisma.social.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends socialFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, socialFindUniqueArgs<ExtArgs>>
    ): Prisma__socialClient<$Result.GetResult<Prisma.$socialPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Social that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {socialFindUniqueOrThrowArgs} args - Arguments to find a Social
     * @example
     * // Get one Social
     * const social = await prisma.social.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends socialFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, socialFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__socialClient<$Result.GetResult<Prisma.$socialPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Social that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {socialFindFirstArgs} args - Arguments to find a Social
     * @example
     * // Get one Social
     * const social = await prisma.social.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends socialFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, socialFindFirstArgs<ExtArgs>>
    ): Prisma__socialClient<$Result.GetResult<Prisma.$socialPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Social that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {socialFindFirstOrThrowArgs} args - Arguments to find a Social
     * @example
     * // Get one Social
     * const social = await prisma.social.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends socialFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, socialFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__socialClient<$Result.GetResult<Prisma.$socialPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Socials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {socialFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Socials
     * const socials = await prisma.social.findMany()
     * 
     * // Get first 10 Socials
     * const socials = await prisma.social.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const socialWithIdOnly = await prisma.social.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends socialFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, socialFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$socialPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Social.
     * @param {socialCreateArgs} args - Arguments to create a Social.
     * @example
     * // Create one Social
     * const Social = await prisma.social.create({
     *   data: {
     *     // ... data to create a Social
     *   }
     * })
     * 
    **/
    create<T extends socialCreateArgs<ExtArgs>>(
      args: SelectSubset<T, socialCreateArgs<ExtArgs>>
    ): Prisma__socialClient<$Result.GetResult<Prisma.$socialPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Socials.
     *     @param {socialCreateManyArgs} args - Arguments to create many Socials.
     *     @example
     *     // Create many Socials
     *     const social = await prisma.social.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends socialCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, socialCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Social.
     * @param {socialDeleteArgs} args - Arguments to delete one Social.
     * @example
     * // Delete one Social
     * const Social = await prisma.social.delete({
     *   where: {
     *     // ... filter to delete one Social
     *   }
     * })
     * 
    **/
    delete<T extends socialDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, socialDeleteArgs<ExtArgs>>
    ): Prisma__socialClient<$Result.GetResult<Prisma.$socialPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Social.
     * @param {socialUpdateArgs} args - Arguments to update one Social.
     * @example
     * // Update one Social
     * const social = await prisma.social.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends socialUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, socialUpdateArgs<ExtArgs>>
    ): Prisma__socialClient<$Result.GetResult<Prisma.$socialPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Socials.
     * @param {socialDeleteManyArgs} args - Arguments to filter Socials to delete.
     * @example
     * // Delete a few Socials
     * const { count } = await prisma.social.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends socialDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, socialDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Socials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {socialUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Socials
     * const social = await prisma.social.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends socialUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, socialUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Social.
     * @param {socialUpsertArgs} args - Arguments to update or create a Social.
     * @example
     * // Update or create a Social
     * const social = await prisma.social.upsert({
     *   create: {
     *     // ... data to create a Social
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Social we want to update
     *   }
     * })
    **/
    upsert<T extends socialUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, socialUpsertArgs<ExtArgs>>
    ): Prisma__socialClient<$Result.GetResult<Prisma.$socialPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Socials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {socialCountArgs} args - Arguments to filter Socials to count.
     * @example
     * // Count the number of Socials
     * const count = await prisma.social.count({
     *   where: {
     *     // ... the filter for the Socials we want to count
     *   }
     * })
    **/
    count<T extends socialCountArgs>(
      args?: Subset<T, socialCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SocialCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Social.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SocialAggregateArgs>(args: Subset<T, SocialAggregateArgs>): Prisma.PrismaPromise<GetSocialAggregateType<T>>

    /**
     * Group by Social.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {socialGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends socialGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: socialGroupByArgs['orderBy'] }
        : { orderBy?: socialGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, socialGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSocialGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the social model
   */
  readonly fields: socialFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for social.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__socialClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    productos<T extends social$productosArgs<ExtArgs> = {}>(args?: Subset<T, social$productosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productosPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the social model
   */ 
  interface socialFieldRefs {
    readonly id: FieldRef<"social", 'Int'>
    readonly nombre: FieldRef<"social", 'String'>
    readonly imagen: FieldRef<"social", 'String'>
  }
    

  // Custom InputTypes

  /**
   * social findUnique
   */
  export type socialFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the social
     */
    select?: socialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: socialInclude<ExtArgs> | null
    /**
     * Filter, which social to fetch.
     */
    where: socialWhereUniqueInput
  }


  /**
   * social findUniqueOrThrow
   */
  export type socialFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the social
     */
    select?: socialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: socialInclude<ExtArgs> | null
    /**
     * Filter, which social to fetch.
     */
    where: socialWhereUniqueInput
  }


  /**
   * social findFirst
   */
  export type socialFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the social
     */
    select?: socialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: socialInclude<ExtArgs> | null
    /**
     * Filter, which social to fetch.
     */
    where?: socialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of socials to fetch.
     */
    orderBy?: socialOrderByWithRelationInput | socialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for socials.
     */
    cursor?: socialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` socials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` socials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of socials.
     */
    distinct?: SocialScalarFieldEnum | SocialScalarFieldEnum[]
  }


  /**
   * social findFirstOrThrow
   */
  export type socialFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the social
     */
    select?: socialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: socialInclude<ExtArgs> | null
    /**
     * Filter, which social to fetch.
     */
    where?: socialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of socials to fetch.
     */
    orderBy?: socialOrderByWithRelationInput | socialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for socials.
     */
    cursor?: socialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` socials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` socials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of socials.
     */
    distinct?: SocialScalarFieldEnum | SocialScalarFieldEnum[]
  }


  /**
   * social findMany
   */
  export type socialFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the social
     */
    select?: socialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: socialInclude<ExtArgs> | null
    /**
     * Filter, which socials to fetch.
     */
    where?: socialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of socials to fetch.
     */
    orderBy?: socialOrderByWithRelationInput | socialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing socials.
     */
    cursor?: socialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` socials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` socials.
     */
    skip?: number
    distinct?: SocialScalarFieldEnum | SocialScalarFieldEnum[]
  }


  /**
   * social create
   */
  export type socialCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the social
     */
    select?: socialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: socialInclude<ExtArgs> | null
    /**
     * The data needed to create a social.
     */
    data: XOR<socialCreateInput, socialUncheckedCreateInput>
  }


  /**
   * social createMany
   */
  export type socialCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many socials.
     */
    data: socialCreateManyInput | socialCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * social update
   */
  export type socialUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the social
     */
    select?: socialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: socialInclude<ExtArgs> | null
    /**
     * The data needed to update a social.
     */
    data: XOR<socialUpdateInput, socialUncheckedUpdateInput>
    /**
     * Choose, which social to update.
     */
    where: socialWhereUniqueInput
  }


  /**
   * social updateMany
   */
  export type socialUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update socials.
     */
    data: XOR<socialUpdateManyMutationInput, socialUncheckedUpdateManyInput>
    /**
     * Filter which socials to update
     */
    where?: socialWhereInput
  }


  /**
   * social upsert
   */
  export type socialUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the social
     */
    select?: socialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: socialInclude<ExtArgs> | null
    /**
     * The filter to search for the social to update in case it exists.
     */
    where: socialWhereUniqueInput
    /**
     * In case the social found by the `where` argument doesn't exist, create a new social with this data.
     */
    create: XOR<socialCreateInput, socialUncheckedCreateInput>
    /**
     * In case the social was found with the provided `where` argument, update it with this data.
     */
    update: XOR<socialUpdateInput, socialUncheckedUpdateInput>
  }


  /**
   * social delete
   */
  export type socialDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the social
     */
    select?: socialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: socialInclude<ExtArgs> | null
    /**
     * Filter which social to delete.
     */
    where: socialWhereUniqueInput
  }


  /**
   * social deleteMany
   */
  export type socialDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which socials to delete
     */
    where?: socialWhereInput
  }


  /**
   * social.productos
   */
  export type social$productosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productos
     */
    select?: productosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productosInclude<ExtArgs> | null
    where?: productosWhereInput
    orderBy?: productosOrderByWithRelationInput | productosOrderByWithRelationInput[]
    cursor?: productosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductosScalarFieldEnum | ProductosScalarFieldEnum[]
  }


  /**
   * social without action
   */
  export type socialDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the social
     */
    select?: socialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: socialInclude<ExtArgs> | null
  }



  /**
   * Model usuarios
   */

  export type AggregateUsuarios = {
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  export type UsuariosAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuariosSumAggregateOutputType = {
    id: number | null
  }

  export type UsuariosMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    contra: string | null
    token: string | null
    expiracion: string | null
  }

  export type UsuariosMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    contra: string | null
    token: string | null
    expiracion: string | null
  }

  export type UsuariosCountAggregateOutputType = {
    id: number
    nombre: number
    contra: number
    token: number
    expiracion: number
    _all: number
  }


  export type UsuariosAvgAggregateInputType = {
    id?: true
  }

  export type UsuariosSumAggregateInputType = {
    id?: true
  }

  export type UsuariosMinAggregateInputType = {
    id?: true
    nombre?: true
    contra?: true
    token?: true
    expiracion?: true
  }

  export type UsuariosMaxAggregateInputType = {
    id?: true
    nombre?: true
    contra?: true
    token?: true
    expiracion?: true
  }

  export type UsuariosCountAggregateInputType = {
    id?: true
    nombre?: true
    contra?: true
    token?: true
    expiracion?: true
    _all?: true
  }

  export type UsuariosAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuarios to aggregate.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usuarios
    **/
    _count?: true | UsuariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuariosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuariosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuariosMaxAggregateInputType
  }

  export type GetUsuariosAggregateType<T extends UsuariosAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuarios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuarios[P]>
      : GetScalarType<T[P], AggregateUsuarios[P]>
  }




  export type usuariosGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: usuariosWhereInput
    orderBy?: usuariosOrderByWithAggregationInput | usuariosOrderByWithAggregationInput[]
    by: UsuariosScalarFieldEnum[] | UsuariosScalarFieldEnum
    having?: usuariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuariosCountAggregateInputType | true
    _avg?: UsuariosAvgAggregateInputType
    _sum?: UsuariosSumAggregateInputType
    _min?: UsuariosMinAggregateInputType
    _max?: UsuariosMaxAggregateInputType
  }

  export type UsuariosGroupByOutputType = {
    id: number
    nombre: string
    contra: string
    token: string
    expiracion: string
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  type GetUsuariosGroupByPayload<T extends usuariosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
            : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
        }
      >
    >


  export type usuariosSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    contra?: boolean
    token?: boolean
    expiracion?: boolean
  }, ExtArgs["result"]["usuarios"]>

  export type usuariosSelectScalar = {
    id?: boolean
    nombre?: boolean
    contra?: boolean
    token?: boolean
    expiracion?: boolean
  }


  export type $usuariosPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "usuarios"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: number
      nombre: string
      contra: string
      token: string
      expiracion: string
    }, ExtArgs["result"]["usuarios"]>
    composites: {}
  }


  type usuariosGetPayload<S extends boolean | null | undefined | usuariosDefaultArgs> = $Result.GetResult<Prisma.$usuariosPayload, S>

  type usuariosCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<usuariosFindManyArgs, 'select' | 'include'> & {
      select?: UsuariosCountAggregateInputType | true
    }

  export interface usuariosDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['usuarios'], meta: { name: 'usuarios' } }
    /**
     * Find zero or one Usuarios that matches the filter.
     * @param {usuariosFindUniqueArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usuariosFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usuariosFindUniqueArgs<ExtArgs>>
    ): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Usuarios that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usuariosFindUniqueOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usuariosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usuariosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindFirstArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usuariosFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usuariosFindFirstArgs<ExtArgs>>
    ): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Usuarios that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindFirstOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usuariosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usuariosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuarios.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuarios.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuariosWithIdOnly = await prisma.usuarios.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usuariosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuariosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Usuarios.
     * @param {usuariosCreateArgs} args - Arguments to create a Usuarios.
     * @example
     * // Create one Usuarios
     * const Usuarios = await prisma.usuarios.create({
     *   data: {
     *     // ... data to create a Usuarios
     *   }
     * })
     * 
    **/
    create<T extends usuariosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usuariosCreateArgs<ExtArgs>>
    ): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Usuarios.
     *     @param {usuariosCreateManyArgs} args - Arguments to create many Usuarios.
     *     @example
     *     // Create many Usuarios
     *     const usuarios = await prisma.usuarios.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usuariosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuariosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuarios.
     * @param {usuariosDeleteArgs} args - Arguments to delete one Usuarios.
     * @example
     * // Delete one Usuarios
     * const Usuarios = await prisma.usuarios.delete({
     *   where: {
     *     // ... filter to delete one Usuarios
     *   }
     * })
     * 
    **/
    delete<T extends usuariosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usuariosDeleteArgs<ExtArgs>>
    ): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Usuarios.
     * @param {usuariosUpdateArgs} args - Arguments to update one Usuarios.
     * @example
     * // Update one Usuarios
     * const usuarios = await prisma.usuarios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usuariosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usuariosUpdateArgs<ExtArgs>>
    ): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {usuariosDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuarios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usuariosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuariosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuarios = await prisma.usuarios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usuariosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usuariosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuarios.
     * @param {usuariosUpsertArgs} args - Arguments to update or create a Usuarios.
     * @example
     * // Update or create a Usuarios
     * const usuarios = await prisma.usuarios.upsert({
     *   create: {
     *     // ... data to create a Usuarios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuarios we want to update
     *   }
     * })
    **/
    upsert<T extends usuariosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usuariosUpsertArgs<ExtArgs>>
    ): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuarios.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends usuariosCountArgs>(
      args?: Subset<T, usuariosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuariosAggregateArgs>(args: Subset<T, UsuariosAggregateArgs>): Prisma.PrismaPromise<GetUsuariosAggregateType<T>>

    /**
     * Group by Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usuariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usuariosGroupByArgs['orderBy'] }
        : { orderBy?: usuariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usuariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuariosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the usuarios model
   */
  readonly fields: usuariosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for usuarios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usuariosClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the usuarios model
   */ 
  interface usuariosFieldRefs {
    readonly id: FieldRef<"usuarios", 'Int'>
    readonly nombre: FieldRef<"usuarios", 'String'>
    readonly contra: FieldRef<"usuarios", 'String'>
    readonly token: FieldRef<"usuarios", 'String'>
    readonly expiracion: FieldRef<"usuarios", 'String'>
  }
    

  // Custom InputTypes

  /**
   * usuarios findUnique
   */
  export type usuariosFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where: usuariosWhereUniqueInput
  }


  /**
   * usuarios findUniqueOrThrow
   */
  export type usuariosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where: usuariosWhereUniqueInput
  }


  /**
   * usuarios findFirst
   */
  export type usuariosFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }


  /**
   * usuarios findFirstOrThrow
   */
  export type usuariosFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }


  /**
   * usuarios findMany
   */
  export type usuariosFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }


  /**
   * usuarios create
   */
  export type usuariosCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * The data needed to create a usuarios.
     */
    data: XOR<usuariosCreateInput, usuariosUncheckedCreateInput>
  }


  /**
   * usuarios createMany
   */
  export type usuariosCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many usuarios.
     */
    data: usuariosCreateManyInput | usuariosCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * usuarios update
   */
  export type usuariosUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * The data needed to update a usuarios.
     */
    data: XOR<usuariosUpdateInput, usuariosUncheckedUpdateInput>
    /**
     * Choose, which usuarios to update.
     */
    where: usuariosWhereUniqueInput
  }


  /**
   * usuarios updateMany
   */
  export type usuariosUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update usuarios.
     */
    data: XOR<usuariosUpdateManyMutationInput, usuariosUncheckedUpdateManyInput>
    /**
     * Filter which usuarios to update
     */
    where?: usuariosWhereInput
  }


  /**
   * usuarios upsert
   */
  export type usuariosUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * The filter to search for the usuarios to update in case it exists.
     */
    where: usuariosWhereUniqueInput
    /**
     * In case the usuarios found by the `where` argument doesn't exist, create a new usuarios with this data.
     */
    create: XOR<usuariosCreateInput, usuariosUncheckedCreateInput>
    /**
     * In case the usuarios was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usuariosUpdateInput, usuariosUncheckedUpdateInput>
  }


  /**
   * usuarios delete
   */
  export type usuariosDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Filter which usuarios to delete.
     */
    where: usuariosWhereUniqueInput
  }


  /**
   * usuarios deleteMany
   */
  export type usuariosDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuarios to delete
     */
    where?: usuariosWhereInput
  }


  /**
   * usuarios without action
   */
  export type usuariosDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CredencialesScalarFieldEnum: {
    id: 'id',
    pasarela: 'pasarela',
    cliente_id: 'cliente_id',
    cliente_secret: 'cliente_secret'
  };

  export type CredencialesScalarFieldEnum = (typeof CredencialesScalarFieldEnum)[keyof typeof CredencialesScalarFieldEnum]


  export const PagosScalarFieldEnum: {
    id: 'id',
    estado: 'estado'
  };

  export type PagosScalarFieldEnum = (typeof PagosScalarFieldEnum)[keyof typeof PagosScalarFieldEnum]


  export const Producto_cantidadScalarFieldEnum: {
    id: 'id',
    idProducto: 'idProducto',
    cantidad: 'cantidad',
    precio_ars: 'precio_ars',
    precio_usd: 'precio_usd',
    precio_eur: 'precio_eur'
  };

  export type Producto_cantidadScalarFieldEnum = (typeof Producto_cantidadScalarFieldEnum)[keyof typeof Producto_cantidadScalarFieldEnum]


  export const ProductosScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    imagen: 'imagen',
    id_social: 'id_social'
  };

  export type ProductosScalarFieldEnum = (typeof ProductosScalarFieldEnum)[keyof typeof ProductosScalarFieldEnum]


  export const SocialScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    imagen: 'imagen'
  };

  export type SocialScalarFieldEnum = (typeof SocialScalarFieldEnum)[keyof typeof SocialScalarFieldEnum]


  export const UsuariosScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    contra: 'contra',
    token: 'token',
    expiracion: 'expiracion'
  };

  export type UsuariosScalarFieldEnum = (typeof UsuariosScalarFieldEnum)[keyof typeof UsuariosScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type credencialesWhereInput = {
    AND?: credencialesWhereInput | credencialesWhereInput[]
    OR?: credencialesWhereInput[]
    NOT?: credencialesWhereInput | credencialesWhereInput[]
    id?: IntFilter<"credenciales"> | number
    pasarela?: StringFilter<"credenciales"> | string
    cliente_id?: StringFilter<"credenciales"> | string
    cliente_secret?: StringFilter<"credenciales"> | string
  }

  export type credencialesOrderByWithRelationInput = {
    id?: SortOrder
    pasarela?: SortOrder
    cliente_id?: SortOrder
    cliente_secret?: SortOrder
  }

  export type credencialesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: credencialesWhereInput | credencialesWhereInput[]
    OR?: credencialesWhereInput[]
    NOT?: credencialesWhereInput | credencialesWhereInput[]
    pasarela?: StringFilter<"credenciales"> | string
    cliente_id?: StringFilter<"credenciales"> | string
    cliente_secret?: StringFilter<"credenciales"> | string
  }, "id">

  export type credencialesOrderByWithAggregationInput = {
    id?: SortOrder
    pasarela?: SortOrder
    cliente_id?: SortOrder
    cliente_secret?: SortOrder
    _count?: credencialesCountOrderByAggregateInput
    _avg?: credencialesAvgOrderByAggregateInput
    _max?: credencialesMaxOrderByAggregateInput
    _min?: credencialesMinOrderByAggregateInput
    _sum?: credencialesSumOrderByAggregateInput
  }

  export type credencialesScalarWhereWithAggregatesInput = {
    AND?: credencialesScalarWhereWithAggregatesInput | credencialesScalarWhereWithAggregatesInput[]
    OR?: credencialesScalarWhereWithAggregatesInput[]
    NOT?: credencialesScalarWhereWithAggregatesInput | credencialesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"credenciales"> | number
    pasarela?: StringWithAggregatesFilter<"credenciales"> | string
    cliente_id?: StringWithAggregatesFilter<"credenciales"> | string
    cliente_secret?: StringWithAggregatesFilter<"credenciales"> | string
  }

  export type pagosWhereInput = {
    AND?: pagosWhereInput | pagosWhereInput[]
    OR?: pagosWhereInput[]
    NOT?: pagosWhereInput | pagosWhereInput[]
    id?: IntFilter<"pagos"> | number
    estado?: IntFilter<"pagos"> | number
  }

  export type pagosOrderByWithRelationInput = {
    id?: SortOrder
    estado?: SortOrder
  }

  export type pagosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: pagosWhereInput | pagosWhereInput[]
    OR?: pagosWhereInput[]
    NOT?: pagosWhereInput | pagosWhereInput[]
    estado?: IntFilter<"pagos"> | number
  }, "id">

  export type pagosOrderByWithAggregationInput = {
    id?: SortOrder
    estado?: SortOrder
    _count?: pagosCountOrderByAggregateInput
    _avg?: pagosAvgOrderByAggregateInput
    _max?: pagosMaxOrderByAggregateInput
    _min?: pagosMinOrderByAggregateInput
    _sum?: pagosSumOrderByAggregateInput
  }

  export type pagosScalarWhereWithAggregatesInput = {
    AND?: pagosScalarWhereWithAggregatesInput | pagosScalarWhereWithAggregatesInput[]
    OR?: pagosScalarWhereWithAggregatesInput[]
    NOT?: pagosScalarWhereWithAggregatesInput | pagosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"pagos"> | number
    estado?: IntWithAggregatesFilter<"pagos"> | number
  }

  export type producto_cantidadWhereInput = {
    AND?: producto_cantidadWhereInput | producto_cantidadWhereInput[]
    OR?: producto_cantidadWhereInput[]
    NOT?: producto_cantidadWhereInput | producto_cantidadWhereInput[]
    id?: IntFilter<"producto_cantidad"> | number
    idProducto?: IntFilter<"producto_cantidad"> | number
    cantidad?: IntFilter<"producto_cantidad"> | number
    precio_ars?: IntFilter<"producto_cantidad"> | number
    precio_usd?: IntFilter<"producto_cantidad"> | number
    precio_eur?: IntFilter<"producto_cantidad"> | number
    productos?: XOR<ProductosRelationFilter, productosWhereInput>
  }

  export type producto_cantidadOrderByWithRelationInput = {
    id?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precio_ars?: SortOrder
    precio_usd?: SortOrder
    precio_eur?: SortOrder
    productos?: productosOrderByWithRelationInput
  }

  export type producto_cantidadWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: producto_cantidadWhereInput | producto_cantidadWhereInput[]
    OR?: producto_cantidadWhereInput[]
    NOT?: producto_cantidadWhereInput | producto_cantidadWhereInput[]
    idProducto?: IntFilter<"producto_cantidad"> | number
    cantidad?: IntFilter<"producto_cantidad"> | number
    precio_ars?: IntFilter<"producto_cantidad"> | number
    precio_usd?: IntFilter<"producto_cantidad"> | number
    precio_eur?: IntFilter<"producto_cantidad"> | number
    productos?: XOR<ProductosRelationFilter, productosWhereInput>
  }, "id">

  export type producto_cantidadOrderByWithAggregationInput = {
    id?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precio_ars?: SortOrder
    precio_usd?: SortOrder
    precio_eur?: SortOrder
    _count?: producto_cantidadCountOrderByAggregateInput
    _avg?: producto_cantidadAvgOrderByAggregateInput
    _max?: producto_cantidadMaxOrderByAggregateInput
    _min?: producto_cantidadMinOrderByAggregateInput
    _sum?: producto_cantidadSumOrderByAggregateInput
  }

  export type producto_cantidadScalarWhereWithAggregatesInput = {
    AND?: producto_cantidadScalarWhereWithAggregatesInput | producto_cantidadScalarWhereWithAggregatesInput[]
    OR?: producto_cantidadScalarWhereWithAggregatesInput[]
    NOT?: producto_cantidadScalarWhereWithAggregatesInput | producto_cantidadScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"producto_cantidad"> | number
    idProducto?: IntWithAggregatesFilter<"producto_cantidad"> | number
    cantidad?: IntWithAggregatesFilter<"producto_cantidad"> | number
    precio_ars?: IntWithAggregatesFilter<"producto_cantidad"> | number
    precio_usd?: IntWithAggregatesFilter<"producto_cantidad"> | number
    precio_eur?: IntWithAggregatesFilter<"producto_cantidad"> | number
  }

  export type productosWhereInput = {
    AND?: productosWhereInput | productosWhereInput[]
    OR?: productosWhereInput[]
    NOT?: productosWhereInput | productosWhereInput[]
    id?: IntFilter<"productos"> | number
    nombre?: StringFilter<"productos"> | string
    imagen?: StringFilter<"productos"> | string
    id_social?: IntFilter<"productos"> | number
    social?: XOR<SocialRelationFilter, socialWhereInput>
    producto_cantidad?: Producto_cantidadListRelationFilter
  }

  export type productosOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrder
    id_social?: SortOrder
    social?: socialOrderByWithRelationInput
    producto_cantidad?: producto_cantidadOrderByRelationAggregateInput
  }

  export type productosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: productosWhereInput | productosWhereInput[]
    OR?: productosWhereInput[]
    NOT?: productosWhereInput | productosWhereInput[]
    nombre?: StringFilter<"productos"> | string
    imagen?: StringFilter<"productos"> | string
    id_social?: IntFilter<"productos"> | number
    social?: XOR<SocialRelationFilter, socialWhereInput>
    producto_cantidad?: Producto_cantidadListRelationFilter
  }, "id">

  export type productosOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrder
    id_social?: SortOrder
    _count?: productosCountOrderByAggregateInput
    _avg?: productosAvgOrderByAggregateInput
    _max?: productosMaxOrderByAggregateInput
    _min?: productosMinOrderByAggregateInput
    _sum?: productosSumOrderByAggregateInput
  }

  export type productosScalarWhereWithAggregatesInput = {
    AND?: productosScalarWhereWithAggregatesInput | productosScalarWhereWithAggregatesInput[]
    OR?: productosScalarWhereWithAggregatesInput[]
    NOT?: productosScalarWhereWithAggregatesInput | productosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"productos"> | number
    nombre?: StringWithAggregatesFilter<"productos"> | string
    imagen?: StringWithAggregatesFilter<"productos"> | string
    id_social?: IntWithAggregatesFilter<"productos"> | number
  }

  export type socialWhereInput = {
    AND?: socialWhereInput | socialWhereInput[]
    OR?: socialWhereInput[]
    NOT?: socialWhereInput | socialWhereInput[]
    id?: IntFilter<"social"> | number
    nombre?: StringFilter<"social"> | string
    imagen?: StringFilter<"social"> | string
    productos?: ProductosListRelationFilter
  }

  export type socialOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrder
    productos?: productosOrderByRelationAggregateInput
  }

  export type socialWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: socialWhereInput | socialWhereInput[]
    OR?: socialWhereInput[]
    NOT?: socialWhereInput | socialWhereInput[]
    nombre?: StringFilter<"social"> | string
    imagen?: StringFilter<"social"> | string
    productos?: ProductosListRelationFilter
  }, "id">

  export type socialOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrder
    _count?: socialCountOrderByAggregateInput
    _avg?: socialAvgOrderByAggregateInput
    _max?: socialMaxOrderByAggregateInput
    _min?: socialMinOrderByAggregateInput
    _sum?: socialSumOrderByAggregateInput
  }

  export type socialScalarWhereWithAggregatesInput = {
    AND?: socialScalarWhereWithAggregatesInput | socialScalarWhereWithAggregatesInput[]
    OR?: socialScalarWhereWithAggregatesInput[]
    NOT?: socialScalarWhereWithAggregatesInput | socialScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"social"> | number
    nombre?: StringWithAggregatesFilter<"social"> | string
    imagen?: StringWithAggregatesFilter<"social"> | string
  }

  export type usuariosWhereInput = {
    AND?: usuariosWhereInput | usuariosWhereInput[]
    OR?: usuariosWhereInput[]
    NOT?: usuariosWhereInput | usuariosWhereInput[]
    id?: IntFilter<"usuarios"> | number
    nombre?: StringFilter<"usuarios"> | string
    contra?: StringFilter<"usuarios"> | string
    token?: StringFilter<"usuarios"> | string
    expiracion?: StringFilter<"usuarios"> | string
  }

  export type usuariosOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    contra?: SortOrder
    token?: SortOrder
    expiracion?: SortOrder
  }

  export type usuariosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: usuariosWhereInput | usuariosWhereInput[]
    OR?: usuariosWhereInput[]
    NOT?: usuariosWhereInput | usuariosWhereInput[]
    nombre?: StringFilter<"usuarios"> | string
    contra?: StringFilter<"usuarios"> | string
    token?: StringFilter<"usuarios"> | string
    expiracion?: StringFilter<"usuarios"> | string
  }, "id">

  export type usuariosOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    contra?: SortOrder
    token?: SortOrder
    expiracion?: SortOrder
    _count?: usuariosCountOrderByAggregateInput
    _avg?: usuariosAvgOrderByAggregateInput
    _max?: usuariosMaxOrderByAggregateInput
    _min?: usuariosMinOrderByAggregateInput
    _sum?: usuariosSumOrderByAggregateInput
  }

  export type usuariosScalarWhereWithAggregatesInput = {
    AND?: usuariosScalarWhereWithAggregatesInput | usuariosScalarWhereWithAggregatesInput[]
    OR?: usuariosScalarWhereWithAggregatesInput[]
    NOT?: usuariosScalarWhereWithAggregatesInput | usuariosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"usuarios"> | number
    nombre?: StringWithAggregatesFilter<"usuarios"> | string
    contra?: StringWithAggregatesFilter<"usuarios"> | string
    token?: StringWithAggregatesFilter<"usuarios"> | string
    expiracion?: StringWithAggregatesFilter<"usuarios"> | string
  }

  export type credencialesCreateInput = {
    pasarela: string
    cliente_id: string
    cliente_secret: string
  }

  export type credencialesUncheckedCreateInput = {
    id?: number
    pasarela: string
    cliente_id: string
    cliente_secret: string
  }

  export type credencialesUpdateInput = {
    pasarela?: StringFieldUpdateOperationsInput | string
    cliente_id?: StringFieldUpdateOperationsInput | string
    cliente_secret?: StringFieldUpdateOperationsInput | string
  }

  export type credencialesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    pasarela?: StringFieldUpdateOperationsInput | string
    cliente_id?: StringFieldUpdateOperationsInput | string
    cliente_secret?: StringFieldUpdateOperationsInput | string
  }

  export type credencialesCreateManyInput = {
    id?: number
    pasarela: string
    cliente_id: string
    cliente_secret: string
  }

  export type credencialesUpdateManyMutationInput = {
    pasarela?: StringFieldUpdateOperationsInput | string
    cliente_id?: StringFieldUpdateOperationsInput | string
    cliente_secret?: StringFieldUpdateOperationsInput | string
  }

  export type credencialesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    pasarela?: StringFieldUpdateOperationsInput | string
    cliente_id?: StringFieldUpdateOperationsInput | string
    cliente_secret?: StringFieldUpdateOperationsInput | string
  }

  export type pagosCreateInput = {
    estado: number
  }

  export type pagosUncheckedCreateInput = {
    id?: number
    estado: number
  }

  export type pagosUpdateInput = {
    estado?: IntFieldUpdateOperationsInput | number
  }

  export type pagosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    estado?: IntFieldUpdateOperationsInput | number
  }

  export type pagosCreateManyInput = {
    id?: number
    estado: number
  }

  export type pagosUpdateManyMutationInput = {
    estado?: IntFieldUpdateOperationsInput | number
  }

  export type pagosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    estado?: IntFieldUpdateOperationsInput | number
  }

  export type producto_cantidadCreateInput = {
    cantidad: number
    precio_ars: number
    precio_usd: number
    precio_eur: number
    productos: productosCreateNestedOneWithoutProducto_cantidadInput
  }

  export type producto_cantidadUncheckedCreateInput = {
    id?: number
    idProducto: number
    cantidad: number
    precio_ars: number
    precio_usd: number
    precio_eur: number
  }

  export type producto_cantidadUpdateInput = {
    cantidad?: IntFieldUpdateOperationsInput | number
    precio_ars?: IntFieldUpdateOperationsInput | number
    precio_usd?: IntFieldUpdateOperationsInput | number
    precio_eur?: IntFieldUpdateOperationsInput | number
    productos?: productosUpdateOneRequiredWithoutProducto_cantidadNestedInput
  }

  export type producto_cantidadUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    idProducto?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precio_ars?: IntFieldUpdateOperationsInput | number
    precio_usd?: IntFieldUpdateOperationsInput | number
    precio_eur?: IntFieldUpdateOperationsInput | number
  }

  export type producto_cantidadCreateManyInput = {
    id?: number
    idProducto: number
    cantidad: number
    precio_ars: number
    precio_usd: number
    precio_eur: number
  }

  export type producto_cantidadUpdateManyMutationInput = {
    cantidad?: IntFieldUpdateOperationsInput | number
    precio_ars?: IntFieldUpdateOperationsInput | number
    precio_usd?: IntFieldUpdateOperationsInput | number
    precio_eur?: IntFieldUpdateOperationsInput | number
  }

  export type producto_cantidadUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    idProducto?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precio_ars?: IntFieldUpdateOperationsInput | number
    precio_usd?: IntFieldUpdateOperationsInput | number
    precio_eur?: IntFieldUpdateOperationsInput | number
  }

  export type productosCreateInput = {
    nombre: string
    imagen: string
    social: socialCreateNestedOneWithoutProductosInput
    producto_cantidad?: producto_cantidadCreateNestedManyWithoutProductosInput
  }

  export type productosUncheckedCreateInput = {
    id?: number
    nombre: string
    imagen: string
    id_social: number
    producto_cantidad?: producto_cantidadUncheckedCreateNestedManyWithoutProductosInput
  }

  export type productosUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    social?: socialUpdateOneRequiredWithoutProductosNestedInput
    producto_cantidad?: producto_cantidadUpdateManyWithoutProductosNestedInput
  }

  export type productosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    id_social?: IntFieldUpdateOperationsInput | number
    producto_cantidad?: producto_cantidadUncheckedUpdateManyWithoutProductosNestedInput
  }

  export type productosCreateManyInput = {
    id?: number
    nombre: string
    imagen: string
    id_social: number
  }

  export type productosUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
  }

  export type productosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    id_social?: IntFieldUpdateOperationsInput | number
  }

  export type socialCreateInput = {
    nombre: string
    imagen: string
    productos?: productosCreateNestedManyWithoutSocialInput
  }

  export type socialUncheckedCreateInput = {
    id?: number
    nombre: string
    imagen: string
    productos?: productosUncheckedCreateNestedManyWithoutSocialInput
  }

  export type socialUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    productos?: productosUpdateManyWithoutSocialNestedInput
  }

  export type socialUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    productos?: productosUncheckedUpdateManyWithoutSocialNestedInput
  }

  export type socialCreateManyInput = {
    id?: number
    nombre: string
    imagen: string
  }

  export type socialUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
  }

  export type socialUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
  }

  export type usuariosCreateInput = {
    nombre: string
    contra: string
    token: string
    expiracion: string
  }

  export type usuariosUncheckedCreateInput = {
    id?: number
    nombre: string
    contra: string
    token: string
    expiracion: string
  }

  export type usuariosUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    contra?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiracion?: StringFieldUpdateOperationsInput | string
  }

  export type usuariosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    contra?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiracion?: StringFieldUpdateOperationsInput | string
  }

  export type usuariosCreateManyInput = {
    id?: number
    nombre: string
    contra: string
    token: string
    expiracion: string
  }

  export type usuariosUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    contra?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiracion?: StringFieldUpdateOperationsInput | string
  }

  export type usuariosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    contra?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiracion?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type credencialesCountOrderByAggregateInput = {
    id?: SortOrder
    pasarela?: SortOrder
    cliente_id?: SortOrder
    cliente_secret?: SortOrder
  }

  export type credencialesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type credencialesMaxOrderByAggregateInput = {
    id?: SortOrder
    pasarela?: SortOrder
    cliente_id?: SortOrder
    cliente_secret?: SortOrder
  }

  export type credencialesMinOrderByAggregateInput = {
    id?: SortOrder
    pasarela?: SortOrder
    cliente_id?: SortOrder
    cliente_secret?: SortOrder
  }

  export type credencialesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type pagosCountOrderByAggregateInput = {
    id?: SortOrder
    estado?: SortOrder
  }

  export type pagosAvgOrderByAggregateInput = {
    id?: SortOrder
    estado?: SortOrder
  }

  export type pagosMaxOrderByAggregateInput = {
    id?: SortOrder
    estado?: SortOrder
  }

  export type pagosMinOrderByAggregateInput = {
    id?: SortOrder
    estado?: SortOrder
  }

  export type pagosSumOrderByAggregateInput = {
    id?: SortOrder
    estado?: SortOrder
  }

  export type ProductosRelationFilter = {
    is?: productosWhereInput
    isNot?: productosWhereInput
  }

  export type producto_cantidadCountOrderByAggregateInput = {
    id?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precio_ars?: SortOrder
    precio_usd?: SortOrder
    precio_eur?: SortOrder
  }

  export type producto_cantidadAvgOrderByAggregateInput = {
    id?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precio_ars?: SortOrder
    precio_usd?: SortOrder
    precio_eur?: SortOrder
  }

  export type producto_cantidadMaxOrderByAggregateInput = {
    id?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precio_ars?: SortOrder
    precio_usd?: SortOrder
    precio_eur?: SortOrder
  }

  export type producto_cantidadMinOrderByAggregateInput = {
    id?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precio_ars?: SortOrder
    precio_usd?: SortOrder
    precio_eur?: SortOrder
  }

  export type producto_cantidadSumOrderByAggregateInput = {
    id?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precio_ars?: SortOrder
    precio_usd?: SortOrder
    precio_eur?: SortOrder
  }

  export type SocialRelationFilter = {
    is?: socialWhereInput
    isNot?: socialWhereInput
  }

  export type Producto_cantidadListRelationFilter = {
    every?: producto_cantidadWhereInput
    some?: producto_cantidadWhereInput
    none?: producto_cantidadWhereInput
  }

  export type producto_cantidadOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type productosCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrder
    id_social?: SortOrder
  }

  export type productosAvgOrderByAggregateInput = {
    id?: SortOrder
    id_social?: SortOrder
  }

  export type productosMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrder
    id_social?: SortOrder
  }

  export type productosMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrder
    id_social?: SortOrder
  }

  export type productosSumOrderByAggregateInput = {
    id?: SortOrder
    id_social?: SortOrder
  }

  export type ProductosListRelationFilter = {
    every?: productosWhereInput
    some?: productosWhereInput
    none?: productosWhereInput
  }

  export type productosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type socialCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrder
  }

  export type socialAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type socialMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrder
  }

  export type socialMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrder
  }

  export type socialSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usuariosCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    contra?: SortOrder
    token?: SortOrder
    expiracion?: SortOrder
  }

  export type usuariosAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usuariosMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    contra?: SortOrder
    token?: SortOrder
    expiracion?: SortOrder
  }

  export type usuariosMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    contra?: SortOrder
    token?: SortOrder
    expiracion?: SortOrder
  }

  export type usuariosSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type productosCreateNestedOneWithoutProducto_cantidadInput = {
    create?: XOR<productosCreateWithoutProducto_cantidadInput, productosUncheckedCreateWithoutProducto_cantidadInput>
    connectOrCreate?: productosCreateOrConnectWithoutProducto_cantidadInput
    connect?: productosWhereUniqueInput
  }

  export type productosUpdateOneRequiredWithoutProducto_cantidadNestedInput = {
    create?: XOR<productosCreateWithoutProducto_cantidadInput, productosUncheckedCreateWithoutProducto_cantidadInput>
    connectOrCreate?: productosCreateOrConnectWithoutProducto_cantidadInput
    upsert?: productosUpsertWithoutProducto_cantidadInput
    connect?: productosWhereUniqueInput
    update?: XOR<XOR<productosUpdateToOneWithWhereWithoutProducto_cantidadInput, productosUpdateWithoutProducto_cantidadInput>, productosUncheckedUpdateWithoutProducto_cantidadInput>
  }

  export type socialCreateNestedOneWithoutProductosInput = {
    create?: XOR<socialCreateWithoutProductosInput, socialUncheckedCreateWithoutProductosInput>
    connectOrCreate?: socialCreateOrConnectWithoutProductosInput
    connect?: socialWhereUniqueInput
  }

  export type producto_cantidadCreateNestedManyWithoutProductosInput = {
    create?: XOR<producto_cantidadCreateWithoutProductosInput, producto_cantidadUncheckedCreateWithoutProductosInput> | producto_cantidadCreateWithoutProductosInput[] | producto_cantidadUncheckedCreateWithoutProductosInput[]
    connectOrCreate?: producto_cantidadCreateOrConnectWithoutProductosInput | producto_cantidadCreateOrConnectWithoutProductosInput[]
    createMany?: producto_cantidadCreateManyProductosInputEnvelope
    connect?: producto_cantidadWhereUniqueInput | producto_cantidadWhereUniqueInput[]
  }

  export type producto_cantidadUncheckedCreateNestedManyWithoutProductosInput = {
    create?: XOR<producto_cantidadCreateWithoutProductosInput, producto_cantidadUncheckedCreateWithoutProductosInput> | producto_cantidadCreateWithoutProductosInput[] | producto_cantidadUncheckedCreateWithoutProductosInput[]
    connectOrCreate?: producto_cantidadCreateOrConnectWithoutProductosInput | producto_cantidadCreateOrConnectWithoutProductosInput[]
    createMany?: producto_cantidadCreateManyProductosInputEnvelope
    connect?: producto_cantidadWhereUniqueInput | producto_cantidadWhereUniqueInput[]
  }

  export type socialUpdateOneRequiredWithoutProductosNestedInput = {
    create?: XOR<socialCreateWithoutProductosInput, socialUncheckedCreateWithoutProductosInput>
    connectOrCreate?: socialCreateOrConnectWithoutProductosInput
    upsert?: socialUpsertWithoutProductosInput
    connect?: socialWhereUniqueInput
    update?: XOR<XOR<socialUpdateToOneWithWhereWithoutProductosInput, socialUpdateWithoutProductosInput>, socialUncheckedUpdateWithoutProductosInput>
  }

  export type producto_cantidadUpdateManyWithoutProductosNestedInput = {
    create?: XOR<producto_cantidadCreateWithoutProductosInput, producto_cantidadUncheckedCreateWithoutProductosInput> | producto_cantidadCreateWithoutProductosInput[] | producto_cantidadUncheckedCreateWithoutProductosInput[]
    connectOrCreate?: producto_cantidadCreateOrConnectWithoutProductosInput | producto_cantidadCreateOrConnectWithoutProductosInput[]
    upsert?: producto_cantidadUpsertWithWhereUniqueWithoutProductosInput | producto_cantidadUpsertWithWhereUniqueWithoutProductosInput[]
    createMany?: producto_cantidadCreateManyProductosInputEnvelope
    set?: producto_cantidadWhereUniqueInput | producto_cantidadWhereUniqueInput[]
    disconnect?: producto_cantidadWhereUniqueInput | producto_cantidadWhereUniqueInput[]
    delete?: producto_cantidadWhereUniqueInput | producto_cantidadWhereUniqueInput[]
    connect?: producto_cantidadWhereUniqueInput | producto_cantidadWhereUniqueInput[]
    update?: producto_cantidadUpdateWithWhereUniqueWithoutProductosInput | producto_cantidadUpdateWithWhereUniqueWithoutProductosInput[]
    updateMany?: producto_cantidadUpdateManyWithWhereWithoutProductosInput | producto_cantidadUpdateManyWithWhereWithoutProductosInput[]
    deleteMany?: producto_cantidadScalarWhereInput | producto_cantidadScalarWhereInput[]
  }

  export type producto_cantidadUncheckedUpdateManyWithoutProductosNestedInput = {
    create?: XOR<producto_cantidadCreateWithoutProductosInput, producto_cantidadUncheckedCreateWithoutProductosInput> | producto_cantidadCreateWithoutProductosInput[] | producto_cantidadUncheckedCreateWithoutProductosInput[]
    connectOrCreate?: producto_cantidadCreateOrConnectWithoutProductosInput | producto_cantidadCreateOrConnectWithoutProductosInput[]
    upsert?: producto_cantidadUpsertWithWhereUniqueWithoutProductosInput | producto_cantidadUpsertWithWhereUniqueWithoutProductosInput[]
    createMany?: producto_cantidadCreateManyProductosInputEnvelope
    set?: producto_cantidadWhereUniqueInput | producto_cantidadWhereUniqueInput[]
    disconnect?: producto_cantidadWhereUniqueInput | producto_cantidadWhereUniqueInput[]
    delete?: producto_cantidadWhereUniqueInput | producto_cantidadWhereUniqueInput[]
    connect?: producto_cantidadWhereUniqueInput | producto_cantidadWhereUniqueInput[]
    update?: producto_cantidadUpdateWithWhereUniqueWithoutProductosInput | producto_cantidadUpdateWithWhereUniqueWithoutProductosInput[]
    updateMany?: producto_cantidadUpdateManyWithWhereWithoutProductosInput | producto_cantidadUpdateManyWithWhereWithoutProductosInput[]
    deleteMany?: producto_cantidadScalarWhereInput | producto_cantidadScalarWhereInput[]
  }

  export type productosCreateNestedManyWithoutSocialInput = {
    create?: XOR<productosCreateWithoutSocialInput, productosUncheckedCreateWithoutSocialInput> | productosCreateWithoutSocialInput[] | productosUncheckedCreateWithoutSocialInput[]
    connectOrCreate?: productosCreateOrConnectWithoutSocialInput | productosCreateOrConnectWithoutSocialInput[]
    createMany?: productosCreateManySocialInputEnvelope
    connect?: productosWhereUniqueInput | productosWhereUniqueInput[]
  }

  export type productosUncheckedCreateNestedManyWithoutSocialInput = {
    create?: XOR<productosCreateWithoutSocialInput, productosUncheckedCreateWithoutSocialInput> | productosCreateWithoutSocialInput[] | productosUncheckedCreateWithoutSocialInput[]
    connectOrCreate?: productosCreateOrConnectWithoutSocialInput | productosCreateOrConnectWithoutSocialInput[]
    createMany?: productosCreateManySocialInputEnvelope
    connect?: productosWhereUniqueInput | productosWhereUniqueInput[]
  }

  export type productosUpdateManyWithoutSocialNestedInput = {
    create?: XOR<productosCreateWithoutSocialInput, productosUncheckedCreateWithoutSocialInput> | productosCreateWithoutSocialInput[] | productosUncheckedCreateWithoutSocialInput[]
    connectOrCreate?: productosCreateOrConnectWithoutSocialInput | productosCreateOrConnectWithoutSocialInput[]
    upsert?: productosUpsertWithWhereUniqueWithoutSocialInput | productosUpsertWithWhereUniqueWithoutSocialInput[]
    createMany?: productosCreateManySocialInputEnvelope
    set?: productosWhereUniqueInput | productosWhereUniqueInput[]
    disconnect?: productosWhereUniqueInput | productosWhereUniqueInput[]
    delete?: productosWhereUniqueInput | productosWhereUniqueInput[]
    connect?: productosWhereUniqueInput | productosWhereUniqueInput[]
    update?: productosUpdateWithWhereUniqueWithoutSocialInput | productosUpdateWithWhereUniqueWithoutSocialInput[]
    updateMany?: productosUpdateManyWithWhereWithoutSocialInput | productosUpdateManyWithWhereWithoutSocialInput[]
    deleteMany?: productosScalarWhereInput | productosScalarWhereInput[]
  }

  export type productosUncheckedUpdateManyWithoutSocialNestedInput = {
    create?: XOR<productosCreateWithoutSocialInput, productosUncheckedCreateWithoutSocialInput> | productosCreateWithoutSocialInput[] | productosUncheckedCreateWithoutSocialInput[]
    connectOrCreate?: productosCreateOrConnectWithoutSocialInput | productosCreateOrConnectWithoutSocialInput[]
    upsert?: productosUpsertWithWhereUniqueWithoutSocialInput | productosUpsertWithWhereUniqueWithoutSocialInput[]
    createMany?: productosCreateManySocialInputEnvelope
    set?: productosWhereUniqueInput | productosWhereUniqueInput[]
    disconnect?: productosWhereUniqueInput | productosWhereUniqueInput[]
    delete?: productosWhereUniqueInput | productosWhereUniqueInput[]
    connect?: productosWhereUniqueInput | productosWhereUniqueInput[]
    update?: productosUpdateWithWhereUniqueWithoutSocialInput | productosUpdateWithWhereUniqueWithoutSocialInput[]
    updateMany?: productosUpdateManyWithWhereWithoutSocialInput | productosUpdateManyWithWhereWithoutSocialInput[]
    deleteMany?: productosScalarWhereInput | productosScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type productosCreateWithoutProducto_cantidadInput = {
    nombre: string
    imagen: string
    social: socialCreateNestedOneWithoutProductosInput
  }

  export type productosUncheckedCreateWithoutProducto_cantidadInput = {
    id?: number
    nombre: string
    imagen: string
    id_social: number
  }

  export type productosCreateOrConnectWithoutProducto_cantidadInput = {
    where: productosWhereUniqueInput
    create: XOR<productosCreateWithoutProducto_cantidadInput, productosUncheckedCreateWithoutProducto_cantidadInput>
  }

  export type productosUpsertWithoutProducto_cantidadInput = {
    update: XOR<productosUpdateWithoutProducto_cantidadInput, productosUncheckedUpdateWithoutProducto_cantidadInput>
    create: XOR<productosCreateWithoutProducto_cantidadInput, productosUncheckedCreateWithoutProducto_cantidadInput>
    where?: productosWhereInput
  }

  export type productosUpdateToOneWithWhereWithoutProducto_cantidadInput = {
    where?: productosWhereInput
    data: XOR<productosUpdateWithoutProducto_cantidadInput, productosUncheckedUpdateWithoutProducto_cantidadInput>
  }

  export type productosUpdateWithoutProducto_cantidadInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    social?: socialUpdateOneRequiredWithoutProductosNestedInput
  }

  export type productosUncheckedUpdateWithoutProducto_cantidadInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    id_social?: IntFieldUpdateOperationsInput | number
  }

  export type socialCreateWithoutProductosInput = {
    nombre: string
    imagen: string
  }

  export type socialUncheckedCreateWithoutProductosInput = {
    id?: number
    nombre: string
    imagen: string
  }

  export type socialCreateOrConnectWithoutProductosInput = {
    where: socialWhereUniqueInput
    create: XOR<socialCreateWithoutProductosInput, socialUncheckedCreateWithoutProductosInput>
  }

  export type producto_cantidadCreateWithoutProductosInput = {
    cantidad: number
    precio_ars: number
    precio_usd: number
    precio_eur: number
  }

  export type producto_cantidadUncheckedCreateWithoutProductosInput = {
    id?: number
    cantidad: number
    precio_ars: number
    precio_usd: number
    precio_eur: number
  }

  export type producto_cantidadCreateOrConnectWithoutProductosInput = {
    where: producto_cantidadWhereUniqueInput
    create: XOR<producto_cantidadCreateWithoutProductosInput, producto_cantidadUncheckedCreateWithoutProductosInput>
  }

  export type producto_cantidadCreateManyProductosInputEnvelope = {
    data: producto_cantidadCreateManyProductosInput | producto_cantidadCreateManyProductosInput[]
    skipDuplicates?: boolean
  }

  export type socialUpsertWithoutProductosInput = {
    update: XOR<socialUpdateWithoutProductosInput, socialUncheckedUpdateWithoutProductosInput>
    create: XOR<socialCreateWithoutProductosInput, socialUncheckedCreateWithoutProductosInput>
    where?: socialWhereInput
  }

  export type socialUpdateToOneWithWhereWithoutProductosInput = {
    where?: socialWhereInput
    data: XOR<socialUpdateWithoutProductosInput, socialUncheckedUpdateWithoutProductosInput>
  }

  export type socialUpdateWithoutProductosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
  }

  export type socialUncheckedUpdateWithoutProductosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
  }

  export type producto_cantidadUpsertWithWhereUniqueWithoutProductosInput = {
    where: producto_cantidadWhereUniqueInput
    update: XOR<producto_cantidadUpdateWithoutProductosInput, producto_cantidadUncheckedUpdateWithoutProductosInput>
    create: XOR<producto_cantidadCreateWithoutProductosInput, producto_cantidadUncheckedCreateWithoutProductosInput>
  }

  export type producto_cantidadUpdateWithWhereUniqueWithoutProductosInput = {
    where: producto_cantidadWhereUniqueInput
    data: XOR<producto_cantidadUpdateWithoutProductosInput, producto_cantidadUncheckedUpdateWithoutProductosInput>
  }

  export type producto_cantidadUpdateManyWithWhereWithoutProductosInput = {
    where: producto_cantidadScalarWhereInput
    data: XOR<producto_cantidadUpdateManyMutationInput, producto_cantidadUncheckedUpdateManyWithoutProductosInput>
  }

  export type producto_cantidadScalarWhereInput = {
    AND?: producto_cantidadScalarWhereInput | producto_cantidadScalarWhereInput[]
    OR?: producto_cantidadScalarWhereInput[]
    NOT?: producto_cantidadScalarWhereInput | producto_cantidadScalarWhereInput[]
    id?: IntFilter<"producto_cantidad"> | number
    idProducto?: IntFilter<"producto_cantidad"> | number
    cantidad?: IntFilter<"producto_cantidad"> | number
    precio_ars?: IntFilter<"producto_cantidad"> | number
    precio_usd?: IntFilter<"producto_cantidad"> | number
    precio_eur?: IntFilter<"producto_cantidad"> | number
  }

  export type productosCreateWithoutSocialInput = {
    nombre: string
    imagen: string
    producto_cantidad?: producto_cantidadCreateNestedManyWithoutProductosInput
  }

  export type productosUncheckedCreateWithoutSocialInput = {
    id?: number
    nombre: string
    imagen: string
    producto_cantidad?: producto_cantidadUncheckedCreateNestedManyWithoutProductosInput
  }

  export type productosCreateOrConnectWithoutSocialInput = {
    where: productosWhereUniqueInput
    create: XOR<productosCreateWithoutSocialInput, productosUncheckedCreateWithoutSocialInput>
  }

  export type productosCreateManySocialInputEnvelope = {
    data: productosCreateManySocialInput | productosCreateManySocialInput[]
    skipDuplicates?: boolean
  }

  export type productosUpsertWithWhereUniqueWithoutSocialInput = {
    where: productosWhereUniqueInput
    update: XOR<productosUpdateWithoutSocialInput, productosUncheckedUpdateWithoutSocialInput>
    create: XOR<productosCreateWithoutSocialInput, productosUncheckedCreateWithoutSocialInput>
  }

  export type productosUpdateWithWhereUniqueWithoutSocialInput = {
    where: productosWhereUniqueInput
    data: XOR<productosUpdateWithoutSocialInput, productosUncheckedUpdateWithoutSocialInput>
  }

  export type productosUpdateManyWithWhereWithoutSocialInput = {
    where: productosScalarWhereInput
    data: XOR<productosUpdateManyMutationInput, productosUncheckedUpdateManyWithoutSocialInput>
  }

  export type productosScalarWhereInput = {
    AND?: productosScalarWhereInput | productosScalarWhereInput[]
    OR?: productosScalarWhereInput[]
    NOT?: productosScalarWhereInput | productosScalarWhereInput[]
    id?: IntFilter<"productos"> | number
    nombre?: StringFilter<"productos"> | string
    imagen?: StringFilter<"productos"> | string
    id_social?: IntFilter<"productos"> | number
  }

  export type producto_cantidadCreateManyProductosInput = {
    id?: number
    cantidad: number
    precio_ars: number
    precio_usd: number
    precio_eur: number
  }

  export type producto_cantidadUpdateWithoutProductosInput = {
    cantidad?: IntFieldUpdateOperationsInput | number
    precio_ars?: IntFieldUpdateOperationsInput | number
    precio_usd?: IntFieldUpdateOperationsInput | number
    precio_eur?: IntFieldUpdateOperationsInput | number
  }

  export type producto_cantidadUncheckedUpdateWithoutProductosInput = {
    id?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precio_ars?: IntFieldUpdateOperationsInput | number
    precio_usd?: IntFieldUpdateOperationsInput | number
    precio_eur?: IntFieldUpdateOperationsInput | number
  }

  export type producto_cantidadUncheckedUpdateManyWithoutProductosInput = {
    id?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precio_ars?: IntFieldUpdateOperationsInput | number
    precio_usd?: IntFieldUpdateOperationsInput | number
    precio_eur?: IntFieldUpdateOperationsInput | number
  }

  export type productosCreateManySocialInput = {
    id?: number
    nombre: string
    imagen: string
  }

  export type productosUpdateWithoutSocialInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    producto_cantidad?: producto_cantidadUpdateManyWithoutProductosNestedInput
  }

  export type productosUncheckedUpdateWithoutSocialInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    producto_cantidad?: producto_cantidadUncheckedUpdateManyWithoutProductosNestedInput
  }

  export type productosUncheckedUpdateManyWithoutSocialInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ProductosCountOutputTypeDefaultArgs instead
     */
    export type ProductosCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ProductosCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SocialCountOutputTypeDefaultArgs instead
     */
    export type SocialCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = SocialCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use credencialesDefaultArgs instead
     */
    export type credencialesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = credencialesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use pagosDefaultArgs instead
     */
    export type pagosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = pagosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use producto_cantidadDefaultArgs instead
     */
    export type producto_cantidadArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = producto_cantidadDefaultArgs<ExtArgs>
    /**
     * @deprecated Use productosDefaultArgs instead
     */
    export type productosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = productosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use socialDefaultArgs instead
     */
    export type socialArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = socialDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usuariosDefaultArgs instead
     */
    export type usuariosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = usuariosDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}